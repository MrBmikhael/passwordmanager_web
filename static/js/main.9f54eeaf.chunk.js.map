{"version":3,"sources":["Redux/UI/Snackbar/SnackbarConstants.ts","Redux/User/Auth/AuthConstants.ts","Redux/User/Auth/AuthActions.ts","Redux/UI/Snackbar/SnackbarActions.ts","Redux/UI/Snackbar/SnackbarReducer.ts","Redux/UI/ProgressBar/ProgressBarConstants.ts","Redux/UI/ProgressBar/ProgressBarReducer.ts","Redux/UI/Global/GlobalConstants.ts","Redux/UI/Global/GlobalReducer.ts","Redux/UI/index.ts","Redux/Data/DataConstants.ts","Redux/Data/DataReducer.ts","Redux/Data/DataActions.ts","Redux/Data/index.ts","Redux/User/Settings/SettingsConstants.ts","Redux/User/Settings/SettingsReducer.ts","Redux/User/Auth/AuthReducer.ts","Redux/User/index.ts","Redux/store.ts","DataHandler/CloudStorage/GoogleDriveAPI.ts","Components/LoginWithGoogle/LoginWithGoogle.tsx","Components/LinearProgressBar/LinearProgressBar.tsx","Redux/UI/Global/GlobalActions.ts","Components/MainAppBar/MainAppBar.tsx","Components/AddFab/AddFab.tsx","Components/NavDrawer/NavDrawer.tsx","Components/Dialogs/CreateCategory/CreateCategory.tsx","Components/Dialogs/CreateEntry/CreateEntry.tsx","Security/PasswordGenerator.ts","Components/Dialogs/MasterPassword/MasterPassword.tsx","Components/Dialogs/UserSettings/UserSettings.tsx","Components/Dialogs/Dialogs.tsx","Components/EntryCard/EntryCard.tsx","Components/EntryGrid/EntryGrid.tsx","Components/Navigator/Navigator.tsx","Components/AlertSnackbar/AlertSnackbar.tsx","Components/ProgressCircle/ProgressCircle.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SnackbarAlertStatus","AuthConstants","LOGIN_GOOGLE","SET_MASTER_PASSWORD","CLEAR_MASTER_PASSWORD","LOGOUT","UserActions","loginUsingGoogle","googleLoginResponse","type","setMasterPassword","masterPassword","clear_master_password","logout","SnackbarConstants","VIEW_SNACKBAR_ALERT","SnackbarActions","viewSnackbarAlert","status","message","initialState","info","SnackbarReducer","state","action","ProgressBarConstants","SET_PROGRESS_VALUE","ENABLE_INDETERMINATE_PROGRESS_BAR","DISABLE_INDETERMINATE_PROGRESS_BAR","progress","indeterminate","ProgressBarReducer","GlobalConstants","END_APP_LOADING","OPEN_NEW_ENTRY_DIALOG","OPEN_NEW_CATEGORY_DIALOG","OPEN_MASTER_PASSWORD_DIALOG","OPEN_USER_SETTINGS_DIALOG","CLOSE_DIALOG","AppLoading","NewEntry","NewCategory","MasterPassword","UserSettings","GlobalReducer","UIReducer","combineReducers","Global","ProgressBar","Snackbar","DataConstants","CREATE_ENTRY","DELETE_ENTRY","CREATE_CATEGORY","DELETE_CATEGORY","CHANGE_SELECTED_CATEGORY","defaultCategory","entries","defaultCategoryName","Passwords","Files","SelectedCategory","DataReducer","user","_","get","pass","url","name","id","Math","random","toString","substr","newEntry","category_name","DataActions","EntryActions","createNewEntry","entry_user","entry_pass","deleteEntry","entry_id","CategoryActions","createNewCategory","deleteCategory","changeSelectedCategory","SettingsConstants","UPDATE_SETTINGS","passwordGen","SettingsReducer","newSettings","GoogleToken","undefined","AuthReducer","AuthConstats","UserReducer","Settings","Auth","rootReducer","UI","User","Data","store","createStore","GoogleDriveAPI","API_KEY","process","axiosInstance","token_type","getState","access_token","this","axios","create","baseURL","timeout","headers","Authorization","params","includeDeleted","extraParams","res","data","fileName","method","folderName","createFile","listFiles","files","find","getFileByName","createFolder","then","rootFolder","Promise","all","instance","GoogleLoginProps","clientId","cookiePolicy","scope","join","isSignedIn","onSuccess","response","dispatch","AuthActions","success","getInstance","createInitialFiles","onFailure","console","error","LoginWithGoogle","useDispatch","Logout","onLogoutSuccess","buttonText","LinearProgressBar","useSelector","props","value","variant","LinearProgress","GlobalActions","endAppLoading","openNewCategoryDialog","openNewEntryDialog","openUserSettingsDialog","closeAllDialogs","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","color","paddingLeft","transition","transitions","MainAppBar","userData","Tooltip","title","arrow","IconButton","size","edge","onClick","Avatar","alt","profileObj","src","imageUrl","sx","Box","AppBar","zIndex","drawer","Toolbar","Typography","noWrap","component","placeholder","flexGrow","xs","md","AddFab","React","useState","open","setOpen","handleClose","actions","icon","SpeedDial","ariaLabel","bottom","right","SpeedDialIcon","onClose","onOpen","map","SpeedDialAction","tooltipTitle","initialExpansionState","NavDrawer","passwordsCategories","filesCategories","selectedCat","expansionState","setExpansion","handleListItemClick","event","newKey","handleListExpansion","Drawer","flexShrink","boxSizing","overflow","List","ListItemButton","ListItemIcon","ListItemText","primary","ExpandLess","ExpandMore","Collapse","in","unmountOnExit","disablePadding","Object","keys","ListItem","button","pl","Divider","category","CreateCategory","useTheme","fullScreen","useMediaQuery","down","values","setValues","Dialog","isOpen","DialogTitle","DialogContent","FormControl","fullWidth","margin","TextField","focused","required","label","onChange","changeEvent","target","DialogActions","Button","autoFocus","username","password","passwordStrength","lowercase","uppercase","number","symbol","CreateEntry","currentCategory","pwGenerationSettings","handleChange","checkPassword","pwStrength","minDiversity","minLength","checkPasswordStrength","pwst","contains","forEach","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","align","minWidth","length","generatedPW","generator","generate","strict","generatePassword","prevState","FormHelperText","alignContent","alignSelf","FormControlLabel","disabled","control","Checkbox","checked","paragraph","DialogContentText","Input","Dialogs","EntryCard","anchorEl","setAnchorEl","elevation","setElevation","copyCellData","str","a","navigator","clipboard","writeText","handleMenu","currentTarget","updateElevation","Card","onMouseEnter","onMouseLeave","maxWidth","CardHeader","avatar","bgcolor","red","substring","ele","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","MenuItem","unshift","window","el","cardAction","subheader","cardHeader","CardContent","gutterBottom","EntryGrid","passWordData","Grid","container","key","entry","item","Navigator","CssBaseline","p","Alert","forwardRef","ref","displayName","AlertSnackbar","reason","Fragment","fontSize","TransitionComponent","Slide","autoHideDuration","delay","severity","GlobalAlertSnackbar","ProgressCircle","CircularProgress","AppLoadingContent","MainAppContent","App","events","useGoogleLogin","assign","useLogin","useTimeout","loadingState","content","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f54eeaf.chunk.js","sourcesContent":["export enum SnackbarAlertStatus {\n  success = 'success',\n  info = 'info',\n  warning = 'warning',\n  error = 'error'\n}\n\nconst SnackbarConstants = {\n  VIEW_SNACKBAR_ALERT: 'VIEW_SNACKBAR_ALERT'\n}\n\nexport default SnackbarConstants","const AuthConstants = {\n  LOGIN_GOOGLE: 'LOGIN_GOOGLE',\n  SET_MASTER_PASSWORD: 'SET_MASTER_PASSWORD',\n  CLEAR_MASTER_PASSWORD: 'CLEAR_MASTER_PASSWORD',\n  LOGOUT: 'LOGOUT'\n}\n\nexport default AuthConstants","import { Action, ActionCreator } from 'redux'\nimport AuthConstants from './AuthConstants'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthAction extends Action {\n  googleLoginResponse?: GoogleLoginResponse\n  masterPassword?: string\n}\n\nconst loginUsingGoogle: ActionCreator<AuthAction> = (googleLoginResponse: GoogleLoginResponse) => {\n  return { type: AuthConstants.LOGIN_GOOGLE, googleLoginResponse }\n}\n\nconst setMasterPassword: ActionCreator<AuthAction> = (masterPassword: string) => {\n  return { type: AuthConstants.SET_MASTER_PASSWORD, masterPassword }\n}\n\nconst clear_master_password: ActionCreator<Action> = () => {\n  return { type: AuthConstants.CLEAR_MASTER_PASSWORD }\n}\n\nconst logout: ActionCreator<Action> = () => {\n  return { type: AuthConstants.LOGOUT }\n}\n\nconst UserActions = {\n  loginUsingGoogle,\n  setMasterPassword,\n  clear_master_password,\n  logout\n}\n\nexport default UserActions\n","import { Action, ActionCreator } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\n\nexport interface SnackbarAlertAction extends Action {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst viewSnackbarAlert: ActionCreator<SnackbarAlertAction> = (status: SnackbarAlertStatus, message: string) => ({\n  type: SnackbarConstants.VIEW_SNACKBAR_ALERT,\n  status,\n  message\n})\n\nconst SnackbarActions = {\n  viewSnackbarAlert\n}\n\nexport default SnackbarActions\n","import { Reducer } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\nimport { SnackbarAlertAction } from './SnackbarActions'\n\nexport interface SnackbarState {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst initialState: SnackbarState = {\n  message: '',\n  status: SnackbarAlertStatus.info\n}\n\nconst SnackbarReducer: Reducer<SnackbarState, SnackbarAlertAction> = (state = initialState, action: SnackbarAlertAction) => {\n  switch (action.type) {\n    case SnackbarConstants.VIEW_SNACKBAR_ALERT:\n      return {\n        ...state,\n        message: action.message,\n        status: action.status\n      }\n    default:\n      return state\n  }\n}\n\nexport default SnackbarReducer\n","const ProgressBarConstants = {\n  SET_PROGRESS_VALUE: 'SET_PROGRESS_VALUE',\n  ENABLE_INDETERMINATE_PROGRESS_BAR: 'ENABLE_INDETERMINATE_PROGRESS_BAR',\n  DISABLE_INDETERMINATE_PROGRESS_BAR: 'DISABLE_INDETERMINATE_PROGRESS_BAR'\n}\n\nexport default ProgressBarConstants","import { Reducer } from 'redux'\nimport { ProgressBarAction } from './ProgressBarActions'\nimport ProgressBarConstants from './ProgressBarConstants'\n\nexport interface ProgressBarState {\n  progress: number\n  indeterminate: boolean\n}\n\nconst initialState = {\n  progress: 0,\n  indeterminate: false\n}\n\nconst ProgressBarReducer: Reducer<ProgressBarState, ProgressBarAction> = (state = initialState, action: ProgressBarAction) => {\n  switch (action.type) {\n    case ProgressBarConstants.DISABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: false\n      }\n    case ProgressBarConstants.ENABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: true\n      }\n    case ProgressBarConstants.SET_PROGRESS_VALUE:\n      return {\n        ...state,\n        progress: action.progress,\n        indeterminate: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default ProgressBarReducer\n","const GlobalConstants = {\n  END_APP_LOADING: 'END_APP_LOADING',\n  OPEN_NEW_ENTRY_DIALOG: 'OPEN_NEW_ENTRY_DIALOG',\n  OPEN_NEW_CATEGORY_DIALOG: 'OPEN_NEW_CATEGORY_DIALOG',\n  OPEN_MASTER_PASSWORD_DIALOG: 'OPEN_MASTER_PASSWORD_DIALOG',\n  OPEN_USER_SETTINGS_DIALOG: 'OPEN_USER_SETTINGS_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n}\n\nexport default GlobalConstants\n","import { Reducer, Action } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nexport interface GlobalState {\n  AppLoading: boolean\n  NewEntry: boolean\n  NewCategory: boolean\n  MasterPassword: boolean\n  UserSettings: boolean\n}\n\nconst initialState: GlobalState = {\n  AppLoading: true,\n  NewEntry: false,\n  NewCategory: false,\n  MasterPassword: false,\n  UserSettings: false\n}\n\nconst GlobalReducer: Reducer<GlobalState, Action> = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case GlobalConstants.END_APP_LOADING:\n      return {\n        ...state,\n        AppLoading: false\n      }\n    case GlobalConstants.OPEN_NEW_CATEGORY_DIALOG:\n      return {\n        ...state,\n        NewCategory: true\n      }\n    case GlobalConstants.OPEN_NEW_ENTRY_DIALOG:\n      return {\n        ...state,\n        NewEntry: true\n      }\n    case GlobalConstants.OPEN_MASTER_PASSWORD_DIALOG:\n      return {\n        ...state,\n        MasterPassword: true\n      }\n    case GlobalConstants.OPEN_USER_SETTINGS_DIALOG:\n      return {\n        ...state,\n        UserSettings: true\n      }\n    case GlobalConstants.CLOSE_DIALOG:\n      return {\n        ...initialState,\n        AppLoading: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default GlobalReducer\n","import { combineReducers } from 'redux'\nimport SnackbarReducer, { SnackbarState } from \"./Snackbar/SnackbarReducer\"\nimport ProgressBarReducer, { ProgressBarState } from \"./ProgressBar/ProgressBarReducer\"\nimport GlobalReducer, { GlobalState } from \"./Global/GlobalReducer\"\n\nexport interface UIState {\n  Global: GlobalState\n  ProgressBar: ProgressBarState\n  Snackbar: SnackbarState\n}\n\nconst UIReducer = combineReducers<UIState>({\n  Global: GlobalReducer,\n  ProgressBar: ProgressBarReducer,\n  Snackbar: SnackbarReducer\n})\n\nexport default UIReducer\n","\nconst EntryConstants = {\n  CREATE_ENTRY: 'CREATE_ENTRY',\n  DELETE_ENTRY: 'DELETE_ENTRY'\n}\n\nconst CategoryConstants = {\n  CREATE_CATEGORY: 'CREATE_CATEGORY',\n  DELETE_CATEGORY: 'DELETE_CATEGORY',\n  CHANGE_SELECTED_CATEGORY: 'CHANGE_SELECTED_CATEGORY'\n}\n\nexport const DataConstants = { EntryConstants, CategoryConstants }","import _ from 'lodash'\nimport { Reducer } from 'redux'\nimport { DataAction } from './DataActions'\nimport { DataConstants } from './DataConstants'\n\nexport interface Entry {\n  id: string\n  name: string\n  user: string\n  pass: string\n  url: string\n}\n\nexport interface Category {\n  entries: Record<string, Entry>\n}\n\nexport interface DataState {\n  Passwords: Record<string, Category>\n  Files: Record<string, Category>\n  SelectedCategory: string\n}\n\nconst initialState = (): DataState => {\n  const defaultCategory: Category = { entries: {} }\n  const defaultCategoryName: string = \"General\"\n  return (\n    {\n      Passwords: {\n        [defaultCategoryName]: defaultCategory\n      },\n      Files: {\n        [defaultCategoryName]: defaultCategory\n      },\n      SelectedCategory: defaultCategoryName\n    }\n  )\n}\n\nconst DataReducer: Reducer<DataState, DataAction> = (state = initialState(), action: DataAction) => {\n  switch (action.type) {\n    case DataConstants.EntryConstants.CREATE_ENTRY:\n      const user = _.get(action, 'entry_user')\n      const pass = _.get(action, 'entry_pass', '')\n      const url = _.get(action, 'url', '')\n      const name = _.get(action, 'name', '')\n\n      if (user) {\n        const id: string = '_' + Math.random().toString(36).substr(2, 16)\n        const newEntry: Entry = { id, user, pass, url, name }\n        const SelectedCategory: string = state.SelectedCategory\n        state.Passwords[SelectedCategory].entries[id] = newEntry\n\n        return {\n          ...state,\n          Passwords: {\n            ...state.Passwords,\n            [SelectedCategory]: { entries: state.Passwords[SelectedCategory].entries }\n          }\n        }\n      }\n      return state\n    case DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY:\n      return {\n        ...state,\n        SelectedCategory: action.category_name\n      }\n    case DataConstants.CategoryConstants.CREATE_CATEGORY:\n      return {\n        ...state,\n        Passwords: {\n          ...state.Passwords,\n          [action.category_name]: { entries: {} }\n        }\n      }\n    default:\n      return state\n  }\n\n}\n\nexport default DataReducer","import { Action, ActionCreator } from 'redux'\nimport { DataConstants } from './DataConstants'\n\nexport interface DataAction extends Action {\n  category_name: string\n  new_category_name?: string\n  entry_user?: string\n  entry_pass?: string\n  entry_id?: string\n  url?: string\n}\n\nconst createNewCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CREATE_CATEGORY, category_name\n})\nconst deleteCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.DELETE_CATEGORY, category_name\n})\nconst changeSelectedCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY, category_name\n})\n\nconst createNewEntry: ActionCreator<DataAction> = (category_name: string, entry_user: string, entry_pass: string, url: string, name: string) => ({\n  type: DataConstants.EntryConstants.CREATE_ENTRY, category_name, entry_user, entry_pass, url, name\n})\nconst deleteEntry: ActionCreator<DataAction> = (category_name: string, entry_id: string) => ({\n  type: DataConstants.EntryConstants.DELETE_ENTRY, category_name, entry_id\n})\n\nconst CategoryActions = { createNewCategory, deleteCategory, changeSelectedCategory }\nconst EntryActions = { createNewEntry, deleteEntry }\n\nconst DataActions = { EntryActions, CategoryActions }\nexport default DataActions","import DataReducer from './DataReducer'\nexport * from './DataActions'\nexport * from './DataReducer'\nexport * from './DataConstants'\nexport default DataReducer","const SettingsConstants = {\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS'\n}\n\nexport default SettingsConstants\n","import { Reducer } from 'redux'\nimport SettingsConstants from './SettingsConstants'\nimport { SettingsAction } from './SettingsActions'\nimport { PasswordGeneratorProps } from '../../../Security/PasswordGenerator'\n\nexport interface SettingsState {\n  passwordGen: PasswordGeneratorProps\n}\n\nconst initialState: SettingsState = {\n  passwordGen: {}\n}\n\nconst SettingsReducer: Reducer<SettingsState, SettingsAction> = (state = initialState, action: SettingsAction) => {\n  switch (action.type) {\n    case SettingsConstants.UPDATE_SETTINGS:\n      return {\n        ...state,\n        ...action.newSettings\n      }\n    default:\n      return state\n  }\n}\n\nexport default SettingsReducer","import { Reducer } from 'redux'\nimport AuthConstats from './AuthConstants'\nimport { AuthAction } from './AuthActions'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthState {\n  GoogleToken: GoogleLoginResponse | undefined\n  masterPassword: string | undefined\n}\n\nconst initialState: AuthState = {\n  GoogleToken: undefined,\n  masterPassword: undefined\n}\n\nconst AuthReducer: Reducer<AuthState, AuthAction> = (state = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case AuthConstats.LOGIN_GOOGLE:\n      return {\n        ...state,\n        GoogleToken: (action.googleLoginResponse)\n      }\n    case AuthConstats.SET_MASTER_PASSWORD:\n      return {\n        ...state,\n        masterPassword: action.masterPassword\n      }\n    case AuthConstats.LOGOUT:\n      return initialState\n    default:\n      return state\n  }\n}\n\nexport default AuthReducer\n","import { combineReducers } from 'redux'\nimport SettingsReducer, { SettingsState } from './Settings/SettingsReducer'\nimport AuthReducer, { AuthState } from './Auth/AuthReducer'\n\nexport interface UserState {\n  Settings: SettingsState\n  Auth: AuthState\n}\n\nconst UserReducer = combineReducers<UserState>({\n  Settings: SettingsReducer,\n  Auth: AuthReducer\n})\n\nexport default UserReducer\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport UIReducer, { UIState } from './UI'\nimport DataReducer, { DataState } from './Data'\nimport UserReducer, { UserState } from './User'\n\nexport interface RootState {\n  UI: UIState\n  User: UserState\n  Data: DataState\n}\n\nconst rootReducer = combineReducers<RootState>({\n  UI: UIReducer,\n  User: UserReducer,\n  Data: DataReducer\n})\n\nlet enhancer = undefined\nif (process.env.NODE_ENV === 'development') {\n  enhancer = composeWithDevTools(applyMiddleware(createLogger()))\n}\n\nconst store = createStore(rootReducer, enhancer)\nexport default store","import axios, { AxiosInstance } from 'axios'\nimport _ from 'lodash'\nimport store from '../../Redux/store'\n\nclass GoogleDriveAPI {\n  private API_KEY: string = _.get(process.env, 'REACT_APP_GOOGLE_API_KEY', '')\n  private axiosInstance: AxiosInstance | null = null\n  private static instance: GoogleDriveAPI | null = null\n\n  public static getInstance(): GoogleDriveAPI {\n    if (this.instance === null) {\n      this.instance = new GoogleDriveAPI()\n    }\n    return this.instance\n  }\n\n  private constructor() {\n    const token_type: string = _.get(store.getState().User.Auth.GoogleToken, 'tokenObj.token_type')\n    const access_token: string = _.get(store.getState().User.Auth.GoogleToken, 'tokenObj.access_token')\n\n    this.axiosInstance = axios.create({\n      baseURL: 'https://www.googleapis.com/drive/v3/',\n      timeout: 3000,\n      headers: { Authorization: `${token_type} ${access_token}` },\n      params: { 'key': this.API_KEY }\n    })\n  }\n\n  public async listFiles(includeDeleted = false, extraParams?: any) {\n    if (this.axiosInstance) {\n      const params = {\n        ...extraParams\n      }\n\n      if (!includeDeleted) {\n        params['q'] = 'trashed=false'\n      }\n\n      const res = await this.axiosInstance(`files`, { params })\n      return res.data\n    }\n  }\n\n  public async createFile(fileName: string, data?: any) {\n    if (this.axiosInstance) {\n      const res = await this.axiosInstance(`files`, {\n        method: 'POST', data: {\n          ...data,\n          name: fileName\n        }\n      })\n      return res.data\n    }\n  }\n\n  public async createFolder(folderName: string, data?: any) {\n    return this.createFile(folderName, { ...data, 'mimeType': 'application/vnd.google-apps.folder' })\n  }\n\n  public async getFileByName(fileName: string) {\n    const files = (await this.listFiles()).files\n    return _.find(files, { 'name': fileName })\n  }\n\n  public async createInitialFiles() {\n    const dataFolderExists = await this.getFileByName('PasswordManagerData')\n    if (dataFolderExists === undefined) {\n      this.createFolder('PasswordManagerData', { 'folderColorRgb': 'Red' }).then((rootFolder) => {\n        Promise.all([\n          this.createFile('DO NOT EDIT ANYTHING IN THIS FOLDER', { 'parents': [rootFolder.id] }),\n          this.createFolder('Passwords', { 'parents': [rootFolder.id] }),\n          this.createFolder('Files', { 'parents': [rootFolder.id] }),\n          this.createFile('Settings.enc.txt', { 'parents': [rootFolder.id] }),\n        ])\n      })\n    }\n  }\n}\n\nexport default GoogleDriveAPI\n","import React from 'react'\nimport _ from 'lodash'\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline, GoogleLogout, useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { useDispatch } from 'react-redux'\nimport AuthActions from '../../Redux/User/Auth/AuthActions'\nimport SnackbarActions from '../../Redux/UI/Snackbar/SnackbarActions'\nimport { SnackbarAlertStatus } from '../../Redux/UI/Snackbar/SnackbarConstants'\nimport GoogleDriveAPI from '../../DataHandler/CloudStorage/GoogleDriveAPI'\n\nconst scopes = [\n  'https://www.googleapis.com/auth/drive.file',\n  'https://www.googleapis.com/auth/drive.appdata'\n]\n\nconst GoogleLoginProps = {\n  clientId: _.get(process.env, 'REACT_APP_GOOGLE_CLIENT_ID', ''),\n  cookiePolicy: 'single_host_origin',\n  scope: scopes.join(' '),\n  isSignedIn: true\n}\n\nconst onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline, dispatch: (arg0: any) => void) => {\n  dispatch(AuthActions.loginUsingGoogle(response))\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.success, 'Google Login Successful'))\n  GoogleDriveAPI.getInstance().createInitialFiles()\n}\n\nconst onFailure = (response: GoogleLoginResponse, dispatch: (arg0: any) => void) => {\n  console.error(response)\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.error, 'Google Login Failed'))\n}\n\nexport const LoginWithGoogle = () => {\n  const dispatch = useDispatch()\n  return (\n    <div>\n      <GoogleLogin\n        {...GoogleLoginProps}\n        onSuccess={(response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch))}\n        onFailure={(response: GoogleLoginResponse) => (onFailure(response, dispatch))}\n      />\n    </div>\n  )\n}\n\nexport const useLogin = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch)),\n    onFailure: (response: GoogleLoginResponse) => (onFailure(response, dispatch))\n  }\n  return useGoogleLogin(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const useLogout = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onLogoutSuccess: () => dispatch(AuthActions.logout()),\n  }\n  return useGoogleLogout(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const Logout = () => {\n  const dispatch = useDispatch()\n  const onSuccess = () => {\n    dispatch(AuthActions.logout())\n  }\n  return (\n    <div>\n      <GoogleLogout {...GoogleLoginProps} onLogoutSuccess={onSuccess} buttonText=\"Logout\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress'\nimport { RootState } from '../../Redux/store'\nimport { useSelector } from 'react-redux'\n\nexport const LinearProgressBar = () => {\n  const state = useSelector((state: RootState) => state.UI.ProgressBar)\n  const props: LinearProgressProps = { value: state.progress, variant: 'determinate' }\n\n  if (state.indeterminate) {\n    props.variant = \"indeterminate\"\n    props.value = 0\n  }\n\n  if ((props.value !== 0 && props.variant === 'determinate') || state.indeterminate) {\n    return (<LinearProgress {...props} />)\n  }\n  return (<></>)\n}","import { Action, ActionCreator } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nconst endAppLoading: ActionCreator<Action> = () => ({ type: GlobalConstants.END_APP_LOADING })\nconst openNewCategoryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_CATEGORY_DIALOG })\nconst openNewEntryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_ENTRY_DIALOG })\nconst openUserSettingsDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_USER_SETTINGS_DIALOG })\nconst closeAllDialogs: ActionCreator<Action> = () => ({ type: GlobalConstants.CLOSE_DIALOG })\n\nconst GlobalActions = {\n  endAppLoading,\n  openNewCategoryDialog,\n  openNewEntryDialog,\n  openUserSettingsDialog,\n  closeAllDialogs\n}\n\nexport default GlobalActions\n","import React from 'react'\nimport { styled, alpha } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport Avatar from '@mui/material/Avatar'\nimport { LoginWithGoogle, Logout } from '../LoginWithGoogle/LoginWithGoogle'\nimport { LinearProgressBar } from '../LinearProgressBar/LinearProgressBar'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { Tooltip } from '@mui/material'\nimport GlobalActions from '../../Redux/UI/Global/GlobalActions'\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto',\n  },\n}))\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}))\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))\n\nexport const MainAppBar = () => {\n  const state = useSelector((state: RootState) => state.User.Auth.GoogleToken)\n  const dispatch = useDispatch()\n\n  let userData = <>\n    <LoginWithGoogle />\n  </>\n\n  if (state) {\n    userData = <>\n      <Logout />\n      <Tooltip title={\"Settings\"} arrow>\n        <IconButton size=\"large\" edge=\"end\" color=\"inherit\" onClick={() => dispatch(GlobalActions.openUserSettingsDialog())}>\n          <SettingsIcon />\n        </IconButton>\n      </Tooltip>\n      <IconButton size=\"large\" edge=\"end\" color=\"inherit\">\n        <Avatar alt={state.profileObj.name} src={state.profileObj.imageUrl} sx={{ width: 24, height: 24 }} />\n      </IconButton>\n    </>\n  }\n\n  return (\n    <Box>\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Password Manager\n          </Typography>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase placeholder=\"Search…\" />\n          </Search>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n            {userData}\n          </Box>\n        </Toolbar>\n        <LinearProgressBar />\n      </AppBar>\n    </Box>\n  )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport GlobalActions from '../../Redux/UI/Global/GlobalActions'\nimport SpeedDial from '@mui/material/SpeedDial'\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon'\nimport SpeedDialAction from '@mui/material/SpeedDialAction'\nimport ShortTextIcon from '@mui/icons-material/ShortText'\nimport FolderIcon from '@mui/icons-material/Folder'\n\nexport const AddFab = () => {\n  const [open, setOpen] = React.useState(false)\n  const dispatch = useDispatch()\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleNewEntry = () => {\n    dispatch(GlobalActions.openNewEntryDialog())\n    handleClose()\n  }\n\n  const handleNewCategory = () => {\n    dispatch(GlobalActions.openNewCategoryDialog())\n    handleClose()\n  }\n\n  const actions = [\n    { icon: <ShortTextIcon />, name: 'New Entry', onClick: handleNewEntry },\n    { icon: <FolderIcon />, name: 'New Category', onClick: handleNewCategory }\n  ]\n\n  return (\n    <SpeedDial\n      ariaLabel=\"Create ...\"\n      sx={{ position: 'fixed', bottom: 36, right: 36 }}\n      icon={<SpeedDialIcon />}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      open={open}\n    >\n      {actions.map((action) => (\n        <SpeedDialAction\n          key={action.name}\n          icon={action.icon}\n          tooltipTitle={action.name}\n          onClick={action.onClick}\n        />\n      ))}\n    </SpeedDial>\n  )\n}","import React, { useState } from 'react'\nimport _ from 'lodash'\nimport Box from '@mui/material/Box'\nimport Drawer from '@mui/material/Drawer'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport ListItem from '@mui/material/ListItem'\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile'\nimport PasswordIcon from '@mui/icons-material/Password'\nimport ListItemIcon from '@mui/material/ListItemIcon'\nimport ListItemText from '@mui/material/ListItemText'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport FolderOpenIcon from '@mui/icons-material/FolderOpen'\nimport Toolbar from '@mui/material/Toolbar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport DataActions from '../../Redux/Data/DataActions'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport Collapse from '@mui/material/Collapse'\nimport { ExpandLess, ExpandMore } from '@mui/icons-material'\n\nconst drawerWidth: number = 240\n\ninterface expansionState {\n  Passwords: boolean,\n  Files: boolean\n}\n\nconst initialExpansionState: expansionState = {\n  Passwords: true,\n  Files: false\n}\n\nexport const NavDrawer = () => {\n  const dispatch = useDispatch()\n  const passwordsCategories = useSelector((state: RootState) => (state.Data.Passwords))\n  const filesCategories = useSelector((state: RootState) => (state.Data.Files))\n  const selectedCat = useSelector((state: RootState) => (state.Data.SelectedCategory))\n\n  const [expansionState, setExpansion] = useState(initialExpansionState)\n\n  const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    dispatch(DataActions.CategoryActions.changeSelectedCategory(newKey))\n  }\n\n  const handleListExpansion = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    setExpansion((state) => ({\n      ...state,\n      [newKey]: !_.get(state, newKey)\n    }))\n  }\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      sx={{\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n      }}\n    >\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          <ListItemButton onClick={(event) => handleListExpansion(event, 'Passwords')}>\n            <ListItemIcon>\n              <PasswordIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Passwords\" />\n            {expansionState.Passwords ? <ExpandLess /> : <ExpandMore />}\n          </ListItemButton>\n          <Collapse in={expansionState.Passwords} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              {\n                Object.keys(passwordsCategories).map((category_name: string) => {\n                  return (\n                    <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)} sx={{ pl: 4, height: 56 }}>\n                      <ListItemIcon>\n                        {(selectedCat === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                      </ListItemIcon>\n                      <ListItemText primary={category_name} />\n                    </ListItem>\n                  )\n                })\n              }\n            </List>\n          </Collapse>\n        </List>\n        <Divider />\n        <List>\n          <ListItemButton onClick={(event) => handleListExpansion(event, 'Files')}>\n            <ListItemIcon>\n              <InsertDriveFileIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Files\" />\n            {expansionState.Files ? <ExpandLess /> : <ExpandMore />}\n          </ListItemButton>\n          <Collapse in={expansionState.Files} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              {\n                Object.keys(filesCategories).map((category_name: string) => {\n                  return (\n                    <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)} sx={{ pl: 4 }}>\n                      <ListItemIcon>\n                        {(selectedCat === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                      </ListItemIcon>\n                      <ListItemText primary={category_name} />\n                    </ListItem>\n                  )\n                })\n              }\n            </List>\n          </Collapse>\n        </List>\n        <Divider />\n      </Box>\n    </Drawer>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Data/DataActions'\nimport TextField from '@mui/material/TextField'\n\nexport interface CreateCategoryProps {\n  isOpen: boolean\n}\n\ninterface CreateCategoryState {\n  category: string\n}\n\nconst initialState: CreateCategoryState = { category: '' }\n\nexport const CreateCategory = (props: CreateCategoryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateCategoryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.category) {\n      dispatch(DataActions.CategoryActions.createNewCategory(values.category))\n    }\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Category\"}\n        </DialogTitle>\n        <DialogContent>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              focused\n              required\n              label=\"Category\"\n              id=\"category\"\n              value={values.category}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IconButton from '@mui/material/IconButton'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport { checkPasswordStrength, generatePassword } from '../../../Security/PasswordGenerator'\nimport Box from '@mui/material/Box'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Typography from '@mui/material/Typography'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Data/DataActions'\nimport { RootState } from '../../../Redux/store'\nimport TextField from '@mui/material/TextField'\nimport OutlinedInput from '@mui/material/OutlinedInput'\nimport { FormHelperText } from '@mui/material'\n\nexport interface CreateEntryProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  username: string\n  password: string\n  url: string\n  name: string\n  passwordStrength: { lowercase: boolean, uppercase: boolean, number: boolean, symbol: boolean, value: string }\n}\n\nconst initialState = {\n  username: '',\n  password: '',\n  url: 'http://',\n  name: '',\n  passwordStrength: {\n    lowercase: false,\n    uppercase: false,\n    number: false,\n    symbol: false,\n    value: 'Too weak'\n  }\n}\n\nexport const CreateEntry = (props: CreateEntryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n  const currentCategory = useSelector((state: RootState) => state.Data.SelectedCategory)\n  const pwGenerationSettings = useSelector((state: RootState) => state.User.Settings.passwordGen)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n\n    if (changeEvent.target.id === 'password') {\n      checkPassword(changeEvent.target.value)\n    }\n  }\n\n  const checkPassword = (password: string) => {\n    const pwStrength = checkPasswordStrength(password)\n    const pwst = { ...initialState.passwordStrength }\n\n    pwStrength.contains.forEach((value) => {\n      pwst[value] = true\n    })\n\n    pwst.value = pwStrength.value\n    setValues((state) => ({\n      ...state,\n      passwordStrength: pwst\n    }))\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.username) {\n      dispatch(DataActions.EntryActions.createNewEntry(currentCategory, values.username, values.password, values.url, values.name))\n    }\n    handleClose()\n  }\n\n  const generatePasswd = () => {\n    const generatedPW = generatePassword(pwGenerationSettings)\n    setValues((prevState: CreateEntryState) => ({\n      ...prevState,\n      password: generatedPW\n    }))\n    checkPassword(generatedPW)\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Entry\"}\n        </DialogTitle>\n        <DialogContent>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              required\n              focused\n              label=\"Name\"\n              id=\"name\"\n              value={values.name}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              required\n              label=\"Username\"\n              id=\"username\"\n              value={values.username}\n              onChange={handleChange}\n            />\n          </FormControl>\n\n          <FormControl variant=\"outlined\" fullWidth margin='dense' required>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <OutlinedInput\n              label=\"Password\"\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Typography align='right' minWidth={'5ch'}>{values.password.length}</Typography>\n                  <IconButton\n                    aria-label=\"generate a new password\"\n                    onClick={generatePasswd}\n                  >\n                    <AutorenewIcon />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n            <FormHelperText>\n              <Box alignContent={'center'} alignSelf={'center'}>\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.lowercase} />} label=\"Lowercase\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.uppercase} />} label=\"Uppercase\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.number} />} label=\"Number\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.symbol} />} label=\"Symbol\" />\n                <Typography align='right' color={'Highlight'} variant='caption'>{values.passwordStrength.value}</Typography>\n              </Box>\n            </FormHelperText>\n          </FormControl>\n          <Box>\n            <Typography paragraph>\n\n            </Typography>\n          </Box>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              label=\"URL\"\n              id=\"url\"\n              value={values.url}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import generator from 'generate-password'\nimport { passwordStrength, Options } from 'check-password-strength'\n\nexport interface PasswordGeneratorProps {\n  length?: number\n  numbers?: boolean\n  symbols?: boolean | string\n  lowercase?: boolean\n  uppercase?: boolean\n  excludeSimilarCharacters?: boolean\n  exclude?: string\n}\n\nexport const generatePassword = (props?: PasswordGeneratorProps) => {\n  return generator.generate({\n    ...props,\n    strict: true\n  })\n}\n\nexport const checkPasswordStrength = (password: string) => {\n  const strengthOptions: Options<string> = [\n    {\n      id: 0,\n      value: \"Too weak\",\n      minDiversity: 0,\n      minLength: 0\n    },\n    {\n      id: 1,\n      value: \"Weak\",\n      minDiversity: 2,\n      minLength: 6\n    },\n    {\n      id: 2,\n      value: \"Medium\",\n      minDiversity: 3,\n      minLength: 12\n    },\n    {\n      id: 3,\n      value: \"Strong\",\n      minDiversity: 4,\n      minLength: 16\n    },\n    {\n      id: 4,\n      value: \"Very Strong\",\n      minDiversity: 4,\n      minLength: 32\n    },\n    {\n      id: 5,\n      value: \"Very Strong\",\n      minDiversity: 3,\n      minLength: 36\n    }\n  ]\n\n  return passwordStrength(password, strengthOptions)\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport UserActions from '../../../Redux/User/Auth/AuthActions'\n\nexport interface MasterPasswordProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  password: string\n}\n\nconst initialState = {\n  password: ''\n}\n\nexport const MasterPassword = (props: MasterPasswordProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if (checkPassword(changeEvent.target.value)) {\n      setValues({\n        ...values,\n        [changeEvent.target.id]: changeEvent.target.value\n      })\n    }\n  }\n\n  const checkPassword = (password: string): boolean => {\n    return false\n  }\n\n  const handleClose = () => {\n    if (values) {\n      dispatch(UserActions.setMasterPassword(values.password))\n      setValues(() => initialState)\n      dispatch(GlobalActions.closeAllDialogs())\n    }\n  }\n\n  const handleCreateAndClose = () => {\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Enter Your Master Password\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter your master password\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Check\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\n\nexport interface UserSettingsProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  password: string\n}\n\nconst initialState = {\n  password: ''\n}\n\nexport const UserSettings = (props: UserSettingsProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    if (values) {\n      setValues(() => initialState)\n      dispatch(GlobalActions.closeAllDialogs())\n    }\n  }\n\n  const handleCreateAndClose = () => {\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Settings\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Settings\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Setting 1</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} autoFocus>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport { CreateCategory } from './CreateCategory/CreateCategory'\nimport { CreateEntry } from './CreateEntry/CreateEntry'\nimport { MasterPassword } from './MasterPassword/MasterPassword'\nimport { UserSettings } from './UserSettings/UserSettings'\n\nexport const Dialogs = () => {\n  const state = useSelector((state: RootState) => state.UI.Global)\n\n  return (\n    <>\n      <CreateCategory isOpen={state.NewCategory} />\n      <CreateEntry isOpen={state.NewEntry} />\n      <MasterPassword isOpen={state.MasterPassword} />\n      <UserSettings isOpen={state.UserSettings} />\n    </>\n  )\n}","import React, { useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardHeader from '@mui/material/CardHeader'\nimport Avatar from '@mui/material/Avatar'\nimport red from '@mui/material/colors/red'\nimport IconButton from '@mui/material/IconButton'\nimport CardContent from '@mui/material/CardContent'\nimport Typography from '@mui/material/Typography'\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'\nimport Tooltip from '@mui/material/Tooltip'\nimport MoreIcon from '@mui/icons-material/MoreVert'\nimport Menu from '@mui/material/Menu'\nimport MenuItem from '@mui/material/MenuItem'\n\ninterface EntryCardProps {\n  name: string\n  url: string\n  user: string\n  pass: string\n}\n\nconst EntryCard = (props: EntryCardProps) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [elevation, setElevation] = useState(1)\n\n  const copyCellData = async (str: string) => {\n    if (navigator.clipboard) {\n      await navigator.clipboard.writeText(str)\n    }\n  }\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  }\n\n  const cardAction = () => {\n    const ele = [\n      <Tooltip title=\"More\" arrow>\n        <IconButton onClick={handleMenu}>\n          <MoreIcon />\n        </IconButton></Tooltip>,\n      <Menu\n        id=\"menu-appbar\"\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        keepMounted\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleClose}>\n          Edit\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          Delete\n        </MenuItem>\n      </Menu>\n    ]\n    if (props.url && props.url !== 'http://') {\n      ele.unshift(\n        <Tooltip title=\"Open\" arrow>\n          <IconButton aria-label=\"open in a new window\" onClick={() => window.open(props.url)}>\n            <OpenInNewIcon />\n          </IconButton>\n        </Tooltip>\n      )\n    }\n\n    return <>{ele.map((el) => el)}</>\n  }\n\n  const cardHeader = () => {\n    if (props.url && props.url !== 'http://') {\n      return <Typography noWrap variant='body2' color={'text.secondary'} maxWidth={200}>{props.url}</Typography>\n    }\n  }\n\n  const updateElevation = () => {\n    if (elevation === 7) {\n      setElevation(1)\n    }\n    else {\n      setElevation(7)\n    }\n  }\n\n  return (\n    <Card elevation={elevation} onMouseEnter={updateElevation} onMouseLeave={updateElevation} sx={{ minWidth: '300px', maxWidth: '500px' }}>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            {props.name.substring(0, 1)}\n          </Avatar>\n        }\n        action={cardAction()}\n        title={<Typography noWrap maxWidth={200}>{props.name}</Typography>}\n        subheader={cardHeader()}\n      />\n      <CardContent>\n        <Typography noWrap gutterBottom variant=\"body2\" color=\"text.secondary\" onClick={() => copyCellData(props.user)}>\n          Username: {props.user}\n        </Typography>\n        <Typography noWrap gutterBottom variant=\"body2\" color=\"text.secondary\" onClick={() => copyCellData(props.pass)}>\n          Password: {props.pass}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default EntryCard\n","import React from 'react'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport { RootState } from '../../Redux/store'\nimport { useSelector } from 'react-redux'\nimport EntryCard from '../EntryCard/EntryCard'\n\nconst EntryGrid = () => {\n  const passWordData = useSelector((state: RootState) => state.Data)\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={3}>\n        {\n          Object.keys(passWordData.Passwords[passWordData.SelectedCategory].entries).map((key: string) => {\n            const entry = passWordData.Passwords[passWordData.SelectedCategory].entries[key]\n            return (\n              <Grid item xs key={entry.id}>\n                <EntryCard name={entry.name} url={entry.url} user={entry.user} pass={entry.pass} />\n              </Grid>\n            )\n          })\n        }\n      </Grid>\n    </Box>\n  )\n}\n\nexport default EntryGrid","import React from 'react'\nimport Box from '@mui/material/Box'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Toolbar from '@mui/material/Toolbar'\nimport { MainAppBar } from '../MainAppBar/MainAppBar'\nimport { AddFab } from '../AddFab/AddFab'\nimport { NavDrawer } from '../NavDrawer/NavDrawer'\nimport { Dialogs } from '../Dialogs/Dialogs'\nimport EntryGrid from '../EntryGrid/EntryGrid'\n// import { EntryTable } from '../EntryTable/EntryTable'\n\nexport const Navigator = () => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Dialogs />\n      <CssBaseline />\n      <MainAppBar />\n      <NavDrawer />\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <Toolbar />\n        <EntryGrid />\n      </Box>\n      <AddFab />\n    </Box>\n  )\n}","import React from 'react'\nimport Slide from '@mui/material/Slide'\nimport Snackbar from '@mui/material/Snackbar'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\nimport { RootState } from '../../Redux/store'\nimport { useSelector } from 'react-redux'\nimport { SnackbarAlertStatus } from '../../Redux/UI/Snackbar/SnackbarConstants'\n\nexport interface AlertSnackbarProps {\n  message: string\n  status: SnackbarAlertStatus\n  delay?: number\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n})\n\nAlert.displayName = 'Alert'\n\nexport const AlertSnackbar = (props: AlertSnackbarProps) => {\n  const [open, setOpen] = React.useState(true)\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const action = (\n    <React.Fragment>\n      <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  )\n\n  return (\n    <Snackbar\n      open={open}\n      TransitionComponent={Slide}\n      autoHideDuration={props.delay || 3000}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      onClose={handleClose}\n      action={action}\n    >\n      <Alert onClose={handleClose} severity={props.status} sx={{ width: '100%' }}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  )\n}\n\nexport const GlobalAlertSnackbar = () => {\n  const state = useSelector((state: RootState) => state.UI.Snackbar)\n  if (state.message !== '') {\n    return <AlertSnackbar message={state.message} status={state.status} />\n  }\n  return <></>\n}\n","import React from 'react'\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport const ProgressCircle = () => {\n  return <CircularProgress />\n}","import React from 'react'\nimport { Navigator } from './Navigator/Navigator'\nimport { GlobalAlertSnackbar } from './AlertSnackbar/AlertSnackbar'\nimport { ProgressCircle } from './ProgressCircle/ProgressCircle'\nimport { useTimeout } from 'usehooks-ts'\nimport { useDispatch, useSelector } from 'react-redux'\nimport GlobalActions from '../Redux/UI/Global/GlobalActions'\nimport { RootState } from '../Redux/store'\nimport { useLogin } from './LoginWithGoogle/LoginWithGoogle'\n\nconst AppLoadingContent = () => {\n  return (\n    <>\n      <ProgressCircle />\n    </>\n  )\n}\n\nconst MainAppContent = () => {\n  return (\n    <>\n      <Navigator />\n    </>\n  )\n}\n\nconst App = () => {\n  const dispatch = useDispatch()\n  useLogin()\n  useTimeout(() => {\n    dispatch(GlobalActions.endAppLoading())\n  }, 3000)\n\n  const loadingState = useSelector((state: RootState) => state.UI.Global.AppLoading)\n\n  let content = <AppLoadingContent />\n  if (!loadingState) {\n    content = <MainAppContent />\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalAlertSnackbar />\n      {content}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './Components/App'\nimport reportWebVitals from './reportWebVitals'\nimport store from './Redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}