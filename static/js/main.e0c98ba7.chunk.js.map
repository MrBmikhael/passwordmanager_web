{"version":3,"sources":["Security/AES.ts","Redux/Store/UI/Snackbar/SnackbarConstants.ts","Redux/Store/User/Auth/AuthConstants.ts","Redux/Store/User/Auth/AuthActions.ts","Redux/Store/UI/Snackbar/SnackbarActions.ts","Components/LoginWithGoogle/LoginWithGoogle.tsx","Components/LinearProgressBar/LinearProgressBar.tsx","Redux/Store/UI/Global/GlobalConstants.ts","Redux/Store/UI/Global/GlobalActions.ts","Components/MainAppBar/MainAppBar.tsx","Components/AddFab/AddFab.tsx","Redux/Store/Data/DataConstants.ts","Redux/Store/Data/DataActions.ts","Redux/Store/UI/EntryGrid/EntryGridConstants.ts","Redux/Store/UI/Snackbar/SnackbarReducer.ts","Redux/Store/UI/ProgressBar/ProgressBarConstants.ts","Redux/Store/UI/ProgressBar/ProgressBarReducer.ts","Redux/Store/UI/Global/GlobalReducer.ts","Redux/Store/UI/EntryGrid/EntryGridReducer.ts","Redux/Store/UI/index.ts","Redux/Store/Data/DataReducer.ts","Redux/Store/Data/index.ts","Redux/Store/User/Settings/SettingsConstants.ts","Redux/Store/User/Settings/SettingsReducer.ts","Redux/Store/User/Auth/AuthReducer.ts","Redux/Store/User/index.ts","Redux/Saga/GoogleDrive/Requests/userData.ts","Redux/Saga/GoogleDrive/Handlers/getUserDataHandler.ts","Redux/Saga/GoogleDrive/GoogleDriveSaga.ts","Redux/index.ts","Redux/Store/UI/EntryGrid/EntryGridActions.ts","Components/NavDrawer/NavDrawer.tsx","Components/Dialogs/CreateCategory/CreateCategory.tsx","Components/Dialogs/CreateEntry/CreateEntry.tsx","Security/PasswordGenerator.ts","Components/Dialogs/GoogleAuth/GoogleAuth.tsx","Components/Dialogs/MasterPassword/MasterPassword.tsx","Components/Dialogs/UserSettings/UserSettings.tsx","Components/Dialogs/Dialogs.tsx","Components/EntryCard/EntryCard.tsx","Components/EntryGrid/EntryGrid.tsx","Components/Navigator/Navigator.tsx","Components/AlertSnackbar/AlertSnackbar.tsx","Components/ProgressCircle/ProgressCircle.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AES","encrypt","secret","key","buffer","Buffer","from","crypto","createHash","update","String","digest","substr","iv","randomBytes","cipher","createCipheriv","concat","final","toString","decrypt","encrypted","slice","decipher","createDecipheriv","SnackbarAlertStatus","AuthConstants","LOGIN_GOOGLE","SET_MASTER_PASSWORD","CLEAR_MASTER_PASSWORD","LOGOUT","UserActions","loginUsingGoogle","googleLoginResponse","type","setMasterPassword","masterPassword","clear_master_password","logout","SnackbarConstants","VIEW_SNACKBAR_ALERT","SnackbarActions","viewSnackbarAlert","status","message","GoogleLoginProps","clientId","_","get","process","cookiePolicy","scope","join","isSignedIn","onSuccess","response","dispatch","AuthActions","success","onFailure","console","error","LoginWithGoogle","useDispatch","render","renderProps","Button","onClick","disabled","variant","Stack","direction","spacing","Typography","Logout","Tooltip","title","arrow","IconButton","size","edge","color","onLogoutSuccess","buttonText","LinearProgressBar","state","useSelector","UI","ProgressBar","props","value","progress","indeterminate","LinearProgress","GlobalConstants","END_APP_LOADING","OPEN_NEW_ENTRY_DIALOG","OPEN_NEW_CATEGORY_DIALOG","OPEN_MASTER_PASSWORD_DIALOG","OPEN_USER_SETTINGS_DIALOG","CLOSE_DIALOG","GlobalActions","endAppLoading","openNewCategoryDialog","openNewEntryDialog","openUserSettingsDialog","closeAllDialogs","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","MainAppBar","User","Auth","GoogleToken","userData","Avatar","alt","profileObj","name","src","imageUrl","sx","Box","AppBar","zIndex","drawer","Toolbar","noWrap","component","placeholder","flexGrow","xs","md","AddFab","React","useState","open","setOpen","handleClose","actions","icon","SpeedDial","ariaLabel","bottom","right","SpeedDialIcon","onClose","onOpen","map","action","SpeedDialAction","tooltipTitle","DataConstants","CREATE_ENTRY","DELETE_ENTRY","CREATE_CATEGORY","DELETE_CATEGORY","CHANGE_SELECTED_CATEGORY","DataActions","EntryActions","createNewEntry","category_name","entry_user","entry_pass","url","deleteEntry","entry_id","CategoryActions","createNewCategory","deleteCategory","changeSelectedCategory","EntryGridConstants","ENTRY_GRID_LOAD_DATA","initialState","info","SnackbarReducer","ProgressBarConstants","SET_PROGRESS_VALUE","ENABLE_INDETERMINATE_PROGRESS_BAR","DISABLE_INDETERMINATE_PROGRESS_BAR","ProgressBarReducer","AppLoading","NewEntry","NewCategory","MasterPassword","UserSettings","GlobalReducer","current_page","total_pages","items","EntryGridReducer","UIReducer","combineReducers","Global","Snackbar","EntryGrid","defaultCategory","entries","defaultCategoryName","Passwords","Files","SelectedCategory","DataReducer","user","pass","id","Math","random","substring","JSON","stringify","newEntry","newState","cloneDeep","SettingsConstants","UPDATE_SETTINGS","passwordGen","SettingsReducer","newSettings","undefined","AuthReducer","AuthConstats","UserReducer","Settings","getUserData","getUserDataHandler","call","res","log","data","watcherSaga","takeEvery","rootReducer","Data","sagaMiddleware","createSagaMiddleware","enhancer","middleware","applyMiddleware","store","createStore","run","EntryGridActions","entryGridLoadData","page","perPage","currentStore","getState","category","keys","Object","ceil","length","forEach","initialExpansionState","NavDrawer","expansionState","setExpansion","handleListItemClick","event","newKey","handleListExpansion","Drawer","flexShrink","boxSizing","overflow","List","ListItemButton","ListItemIcon","ListItemText","primary","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","ListItem","button","pl","Divider","CreateCategory","useTheme","fullScreen","useMediaQuery","down","values","setValues","Dialog","isOpen","DialogTitle","DialogContent","FormControl","fullWidth","margin","TextField","focused","required","label","onChange","changeEvent","target","DialogActions","autoFocus","CreateEntry","username","password","passwordStrength","lowercase","uppercase","number","symbol","currentCategory","pwGenerationSettings","handleChange","checkPassword","pwStrength","minDiversity","minLength","checkPasswordStrength","pwst","contains","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","align","minWidth","generatedPW","generator","generate","strict","generatePassword","prevState","FormHelperText","alignContent","alignSelf","FormControlLabel","control","Checkbox","checked","paragraph","GoogleAuth","auth","Boolean","DialogContentText","Input","Dialogs","anchorEl","elevation","EntryCard","setState","copyCellData","str","a","navigator","clipboard","writeText","handleMenu","pState","currentTarget","handleEditClick","handleDeleteClick","isUrl","updateElevation","iconUrl","replace","Card","onMouseEnter","onMouseLeave","maxWidth","CardHeader","avatar","bgcolor","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","subheader","Link","underline","href","cardHeader","CardContent","gutterBottom","entrygridData","cards","entry","push","Grid","item","pages","Pagination","showFirstButton","showLastButton","count","boundaryCount","container","Navigator","CssBaseline","p","Alert","forwardRef","ref","displayName","AlertSnackbar","reason","Fragment","fontSize","TransitionComponent","Slide","autoHideDuration","delay","severity","GlobalAlertSnackbar","ProgressCircle","CircularProgress","AppLoadingContent","MainAppContent","App","events","useGoogleLogin","assign","useLogin","useTimeout","loadingState","content","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0c98ba7.chunk.js","sourcesContent":["import crypto from 'crypto'\n\nconst encrypt = (secret: string, key: string): string => {\n  const buffer = Buffer.from(secret, 'utf8')\n  key = crypto.createHash('sha256').update(String(key)).digest('base64').substr(0, 32)\n  const iv = crypto.randomBytes(16)\n  const cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  const result = Buffer.concat([iv, cipher.update(buffer), cipher.final()])\n  return result.toString('base64')\n}\n\nconst decrypt = (secret: string, key: string): string => {\n  let encrypted = Buffer.from(secret, 'base64')\n  key = crypto.createHash('sha256').update(String(key)).digest('base64').substr(0, 32)\n  const iv = encrypted.slice(0, 16)\n  encrypted = encrypted.slice(16)\n  const decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n  const result = Buffer.concat([decipher.update(encrypted), decipher.final()])\n  return result.toString()\n}\n\nconst AES = { encrypt, decrypt }\nexport default AES\n","export enum SnackbarAlertStatus {\n  success = 'success',\n  info = 'info',\n  warning = 'warning',\n  error = 'error'\n}\n\nconst SnackbarConstants = {\n  VIEW_SNACKBAR_ALERT: 'VIEW_SNACKBAR_ALERT'\n}\n\nexport default SnackbarConstants","const AuthConstants = {\n  LOGIN_GOOGLE: 'LOGIN_GOOGLE',\n  SET_MASTER_PASSWORD: 'SET_MASTER_PASSWORD',\n  CLEAR_MASTER_PASSWORD: 'CLEAR_MASTER_PASSWORD',\n  LOGOUT: 'LOGOUT'\n}\n\nexport default AuthConstants","import { Action, ActionCreator } from 'redux'\nimport AuthConstants from './AuthConstants'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthAction extends Action {\n  googleLoginResponse?: GoogleLoginResponse\n  masterPassword?: string\n}\n\nconst loginUsingGoogle: ActionCreator<AuthAction> = (googleLoginResponse: GoogleLoginResponse) => {\n  return { type: AuthConstants.LOGIN_GOOGLE, googleLoginResponse }\n}\n\nconst setMasterPassword: ActionCreator<AuthAction> = (masterPassword: string) => {\n  return { type: AuthConstants.SET_MASTER_PASSWORD, masterPassword }\n}\n\nconst clear_master_password: ActionCreator<Action> = () => {\n  return { type: AuthConstants.CLEAR_MASTER_PASSWORD }\n}\n\nconst logout: ActionCreator<Action> = () => {\n  return { type: AuthConstants.LOGOUT }\n}\n\nconst UserActions = {\n  loginUsingGoogle,\n  setMasterPassword,\n  clear_master_password,\n  logout\n}\n\nexport default UserActions\n","import { Action, ActionCreator } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\n\nexport interface SnackbarAlertAction extends Action {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst viewSnackbarAlert: ActionCreator<SnackbarAlertAction> = (status: SnackbarAlertStatus, message: string) => ({\n  type: SnackbarConstants.VIEW_SNACKBAR_ALERT,\n  status,\n  message\n})\n\nconst SnackbarActions = {\n  viewSnackbarAlert\n}\n\nexport default SnackbarActions\n","import React from 'react'\nimport _ from 'lodash'\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline, GoogleLogout, useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { useDispatch } from 'react-redux'\nimport AuthActions from '../../Redux/Store/User/Auth/AuthActions'\nimport SnackbarActions from '../../Redux/Store/UI/Snackbar/SnackbarActions'\nimport { SnackbarAlertStatus } from '../../Redux/Store/UI/Snackbar/SnackbarConstants'\nimport Button from '@mui/material/Button'\nimport Stack from '@mui/material/Stack'\nimport Typography from '@mui/material/Typography'\nimport GoogleIcon from '@mui/icons-material/Google'\nimport Tooltip from '@mui/material/Tooltip'\nimport IconButton from '@mui/material/IconButton'\nimport LogoutIcon from '@mui/icons-material/Logout'\n\nexport const scopes = [\n  'https://www.googleapis.com/auth/drive.file',\n  'https://www.googleapis.com/auth/drive.appdata'\n]\n\nconst GoogleLoginProps = {\n  clientId: _.get(process.env, 'REACT_APP_GOOGLE_CLIENT_ID', ''),\n  cookiePolicy: 'single_host_origin',\n  scope: scopes.join(' '),\n  isSignedIn: true\n}\n\nconst onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline, dispatch: (arg0: any) => void) => {\n  dispatch(AuthActions.loginUsingGoogle(response))\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.success, 'Google Login Successful'))\n}\n\nconst onFailure = (response: GoogleLoginResponse, dispatch: (arg0: any) => void) => {\n  console.error(response)\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.error, 'Google Login Failed'))\n}\n\nexport const LoginWithGoogle = () => {\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <GoogleLogin\n        {...GoogleLoginProps}\n        render={(renderProps) => <Button onClick={renderProps.onClick} disabled={renderProps.disabled} variant='contained'><Stack direction=\"row\" spacing={1}><GoogleIcon /><Typography>Sign in with Google</Typography></Stack></Button>}\n        onSuccess={(response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch))}\n        onFailure={(response: GoogleLoginResponse) => (onFailure(response, dispatch))}\n        cookiePolicy={'single_host_origin'}\n      >\n      </GoogleLogin>\n    </div>\n  )\n}\n\nexport const useLogin = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch)),\n    onFailure: (response: GoogleLoginResponse) => (onFailure(response, dispatch))\n  }\n  return useGoogleLogin(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const useLogout = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onLogoutSuccess: () => dispatch(AuthActions.logout()),\n  }\n  return useGoogleLogout(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const Logout = () => {\n  const dispatch = useDispatch()\n  const onSuccess = () => {\n    dispatch(AuthActions.logout())\n  }\n  return (\n    <div>\n      <GoogleLogout {...GoogleLoginProps} render={(renderProps) => <Tooltip title={\"Logout\"} arrow><IconButton size=\"large\" edge=\"end\" color=\"inherit\" onClick={renderProps.onClick}><LogoutIcon /></IconButton></Tooltip>} onLogoutSuccess={onSuccess} buttonText=\"Logout\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress'\nimport { RootState } from '../../Redux'\nimport { useSelector } from 'react-redux'\n\nexport const LinearProgressBar = () => {\n  const state = useSelector((state: RootState) => state.UI.ProgressBar)\n  const props: LinearProgressProps = { value: state.progress, variant: 'determinate' }\n\n  if (state.indeterminate) {\n    props.variant = \"indeterminate\"\n    props.value = 0\n  }\n\n  if ((props.value !== 0 && props.variant === 'determinate') || state.indeterminate) {\n    return (<LinearProgress {...props} />)\n  }\n  return (<></>)\n}","const GlobalConstants = {\n  END_APP_LOADING: 'END_APP_LOADING',\n  OPEN_NEW_ENTRY_DIALOG: 'OPEN_NEW_ENTRY_DIALOG',\n  OPEN_NEW_CATEGORY_DIALOG: 'OPEN_NEW_CATEGORY_DIALOG',\n  OPEN_MASTER_PASSWORD_DIALOG: 'OPEN_MASTER_PASSWORD_DIALOG',\n  OPEN_USER_SETTINGS_DIALOG: 'OPEN_USER_SETTINGS_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n}\n\nexport default GlobalConstants\n","import { Action, ActionCreator } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nconst endAppLoading: ActionCreator<Action> = () => ({ type: GlobalConstants.END_APP_LOADING })\nconst openNewCategoryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_CATEGORY_DIALOG })\nconst openNewEntryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_ENTRY_DIALOG })\nconst openUserSettingsDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_USER_SETTINGS_DIALOG })\nconst closeAllDialogs: ActionCreator<Action> = () => ({ type: GlobalConstants.CLOSE_DIALOG })\n\nconst GlobalActions = {\n  endAppLoading,\n  openNewCategoryDialog,\n  openNewEntryDialog,\n  openUserSettingsDialog,\n  closeAllDialogs\n}\n\nexport default GlobalActions\n","import React from 'react'\nimport { styled, alpha } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux'\nimport Avatar from '@mui/material/Avatar'\nimport { Logout } from '../LoginWithGoogle/LoginWithGoogle'\nimport { LinearProgressBar } from '../LinearProgressBar/LinearProgressBar'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { Tooltip } from '@mui/material'\nimport GlobalActions from '../../Redux/Store/UI/Global/GlobalActions'\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto',\n  },\n}))\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}))\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))\n\nexport const MainAppBar = () => {\n  const state = useSelector((state: RootState) => state.User.Auth.GoogleToken)\n  const dispatch = useDispatch()\n  let userData = <></>\n\n  if (state) {\n    userData = <>\n      <Logout />\n      <Tooltip title={\"Settings\"} arrow>\n        <IconButton size=\"large\" edge=\"end\" color=\"inherit\" onClick={() => dispatch(GlobalActions.openUserSettingsDialog())}>\n          <SettingsIcon />\n        </IconButton>\n      </Tooltip>\n      <IconButton size=\"large\" edge=\"end\" color=\"inherit\">\n        <Avatar alt={state.profileObj.name} src={state.profileObj.imageUrl} sx={{ width: 24, height: 24 }} />\n      </IconButton>\n    </>\n  }\n\n  return (\n    <Box>\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Password Manager\n          </Typography>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase placeholder=\"Search…\" />\n          </Search>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n            {userData}\n          </Box>\n        </Toolbar>\n        <LinearProgressBar />\n      </AppBar>\n    </Box>\n  )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport GlobalActions from '../../Redux/Store/UI/Global/GlobalActions'\nimport SpeedDial from '@mui/material/SpeedDial'\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon'\nimport SpeedDialAction from '@mui/material/SpeedDialAction'\nimport ShortTextIcon from '@mui/icons-material/ShortText'\nimport FolderIcon from '@mui/icons-material/Folder'\n\nexport const AddFab = () => {\n  const [open, setOpen] = React.useState(false)\n  const dispatch = useDispatch()\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleNewEntry = () => {\n    dispatch(GlobalActions.openNewEntryDialog())\n    handleClose()\n  }\n\n  const handleNewCategory = () => {\n    dispatch(GlobalActions.openNewCategoryDialog())\n    handleClose()\n  }\n\n  const actions = [\n    { icon: <ShortTextIcon />, name: 'New Entry', onClick: handleNewEntry },\n    { icon: <FolderIcon />, name: 'New Category', onClick: handleNewCategory }\n  ]\n\n  return (\n    <SpeedDial\n      ariaLabel=\"Create ...\"\n      sx={{ position: 'fixed', bottom: 36, right: 36 }}\n      icon={<SpeedDialIcon />}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      open={open}\n    >\n      {actions.map((action) => (\n        <SpeedDialAction\n          key={action.name}\n          icon={action.icon}\n          tooltipTitle={action.name}\n          onClick={action.onClick}\n        />\n      ))}\n    </SpeedDial>\n  )\n}","\nconst EntryConstants = {\n  CREATE_ENTRY: 'CREATE_ENTRY',\n  DELETE_ENTRY: 'DELETE_ENTRY'\n}\n\nconst CategoryConstants = {\n  CREATE_CATEGORY: 'CREATE_CATEGORY',\n  DELETE_CATEGORY: 'DELETE_CATEGORY',\n  CHANGE_SELECTED_CATEGORY: 'CHANGE_SELECTED_CATEGORY'\n}\n\nexport const DataConstants = { EntryConstants, CategoryConstants }","import { Action, ActionCreator } from 'redux'\nimport { DataConstants } from './DataConstants'\n\nexport interface DataAction extends Action {\n  category_name: string\n  new_category_name?: string\n  entry_user?: string\n  entry_pass?: string\n  entry_id?: string\n  url?: string\n}\n\nconst createNewCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CREATE_CATEGORY, category_name\n})\nconst deleteCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.DELETE_CATEGORY, category_name\n})\nconst changeSelectedCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY, category_name\n})\n\nconst createNewEntry: ActionCreator<DataAction> = (category_name: string, entry_user: string, entry_pass: string, url: string, name: string, masterPassword: string) => ({\n  type: DataConstants.EntryConstants.CREATE_ENTRY, category_name, entry_user, entry_pass, url, name, masterPassword\n})\nconst deleteEntry: ActionCreator<DataAction> = (category_name: string, entry_id: string) => ({\n  type: DataConstants.EntryConstants.DELETE_ENTRY, category_name, entry_id\n})\n\nconst CategoryActions = { createNewCategory, deleteCategory, changeSelectedCategory }\nconst EntryActions = { createNewEntry, deleteEntry }\n\nconst DataActions = { EntryActions, CategoryActions }\nexport default DataActions","const EntryGridConstants = {\n  ENTRY_GRID_LOAD_DATA: 'ENTRY_GRID_LOAD_DATA'\n}\n\nexport default EntryGridConstants","import { Reducer } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\nimport { SnackbarAlertAction } from './SnackbarActions'\n\nexport interface SnackbarState {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst initialState: SnackbarState = {\n  message: '',\n  status: SnackbarAlertStatus.info\n}\n\nconst SnackbarReducer: Reducer<SnackbarState, SnackbarAlertAction> = (state = initialState, action: SnackbarAlertAction) => {\n  switch (action.type) {\n    case SnackbarConstants.VIEW_SNACKBAR_ALERT:\n      return {\n        ...state,\n        message: action.message,\n        status: action.status\n      }\n    default:\n      return state\n  }\n}\n\nexport default SnackbarReducer\n","const ProgressBarConstants = {\n  SET_PROGRESS_VALUE: 'SET_PROGRESS_VALUE',\n  ENABLE_INDETERMINATE_PROGRESS_BAR: 'ENABLE_INDETERMINATE_PROGRESS_BAR',\n  DISABLE_INDETERMINATE_PROGRESS_BAR: 'DISABLE_INDETERMINATE_PROGRESS_BAR'\n}\n\nexport default ProgressBarConstants","import { Reducer } from 'redux'\nimport { ProgressBarAction } from './ProgressBarActions'\nimport ProgressBarConstants from './ProgressBarConstants'\n\nexport interface ProgressBarState {\n  progress: number\n  indeterminate: boolean\n}\n\nconst initialState = {\n  progress: 0,\n  indeterminate: false\n}\n\nconst ProgressBarReducer: Reducer<ProgressBarState, ProgressBarAction> = (state = initialState, action: ProgressBarAction) => {\n  switch (action.type) {\n    case ProgressBarConstants.DISABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: false\n      }\n    case ProgressBarConstants.ENABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: true\n      }\n    case ProgressBarConstants.SET_PROGRESS_VALUE:\n      return {\n        ...state,\n        progress: action.progress,\n        indeterminate: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default ProgressBarReducer\n","import { Reducer, Action } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nexport interface GlobalState {\n  AppLoading: boolean\n  NewEntry: boolean\n  NewCategory: boolean\n  MasterPassword: boolean\n  UserSettings: boolean\n}\n\nconst initialState: GlobalState = {\n  AppLoading: true,\n  NewEntry: false,\n  NewCategory: false,\n  MasterPassword: false,\n  UserSettings: false\n}\n\nconst GlobalReducer: Reducer<GlobalState, Action> = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case GlobalConstants.END_APP_LOADING:\n      return {\n        ...state,\n        AppLoading: false\n      }\n    case GlobalConstants.OPEN_NEW_CATEGORY_DIALOG:\n      return {\n        ...state,\n        NewCategory: true\n      }\n    case GlobalConstants.OPEN_NEW_ENTRY_DIALOG:\n      return {\n        ...state,\n        NewEntry: true\n      }\n    case GlobalConstants.OPEN_MASTER_PASSWORD_DIALOG:\n      return {\n        ...state,\n        MasterPassword: true\n      }\n    case GlobalConstants.OPEN_USER_SETTINGS_DIALOG:\n      return {\n        ...state,\n        UserSettings: true\n      }\n    case GlobalConstants.CLOSE_DIALOG:\n      return {\n        ...initialState,\n        AppLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nexport default GlobalReducer\n","import { Reducer } from 'redux'\nimport EntryGridConstants from './EntryGridConstants'\nimport { EntryGridAction } from './EntryGridActions'\nimport { Entry } from '../../Data'\n\nexport interface EntryGridState {\n  current_page: number\n  total_pages: number\n  items: Record<string, Entry>\n}\n\nconst initialState = {\n  current_page: 1,\n  total_pages: 0,\n  items: {}\n}\n\nconst EntryGridReducer: Reducer<EntryGridState, EntryGridAction> = (state = initialState, action: EntryGridAction) => {\n  switch (action.type) {\n    case EntryGridConstants.ENTRY_GRID_LOAD_DATA:\n      return {\n        total_pages: action.total_pages,\n        current_page: action.current_page,\n        items: action.items\n      }\n    default:\n      return state\n  }\n}\n\nexport default EntryGridReducer","import { combineReducers } from 'redux'\nimport SnackbarReducer, { SnackbarState } from \"./Snackbar/SnackbarReducer\"\nimport ProgressBarReducer, { ProgressBarState } from \"./ProgressBar/ProgressBarReducer\"\nimport GlobalReducer, { GlobalState } from \"./Global/GlobalReducer\"\nimport EntryGridReducer, { EntryGridState } from './EntryGrid/EntryGridReducer'\n\nexport interface UIState {\n  Global: GlobalState\n  ProgressBar: ProgressBarState\n  Snackbar: SnackbarState\n  EntryGrid: EntryGridState\n}\n\nconst UIReducer = combineReducers<UIState>({\n  Global: GlobalReducer,\n  ProgressBar: ProgressBarReducer,\n  Snackbar: SnackbarReducer,\n  EntryGrid: EntryGridReducer\n})\n\nexport default UIReducer\n","import _ from 'lodash'\nimport { Reducer } from 'redux'\nimport AES from '../../../Security/AES'\nimport { DataAction } from './DataActions'\nimport { DataConstants } from './DataConstants'\n\nexport interface Entry {\n  id: string\n  name: string\n  user: string\n  pass: string\n  url: string\n  encrypted: string\n}\n\nexport interface Category {\n  entries: Record<string, Entry>\n}\n\nexport interface DataState {\n  Passwords: Record<string, Category>\n  Files: Record<string, Category>\n  SelectedCategory: string\n}\n\nconst initialState = (): DataState => {\n  const defaultCategory: Category = { entries: {} }\n  const defaultCategoryName: string = \"General\"\n  return (\n    {\n      Passwords: {\n        [defaultCategoryName]: defaultCategory\n      },\n      Files: {\n        [defaultCategoryName]: defaultCategory\n      },\n      SelectedCategory: defaultCategoryName\n    }\n  )\n}\n\nconst DataReducer: Reducer<DataState, DataAction> = (state = initialState(), action: DataAction) => {\n  switch (action.type) {\n    case DataConstants.EntryConstants.CREATE_ENTRY:\n      const user = _.get(action, 'entry_user')\n      const pass = _.get(action, 'entry_pass', '')\n      const url = _.get(action, 'url', '')\n      const name = _.get(action, 'name', '')\n      const masterPassword = _.get(action, 'masterPassword', '')\n\n      if (user) {\n        const id: string = '_' + Math.random().toString(36).substring(2, 16)\n        const encrypted = AES.encrypt(JSON.stringify({ id, user, pass, url, name }), masterPassword)\n        const newEntry: Entry = { id, user, pass, url, name, encrypted }\n        const SelectedCategory: string = state.SelectedCategory\n        const newState = _.cloneDeep(state)\n        newState.Passwords[SelectedCategory].entries[id] = newEntry\n        return newState\n      }\n\n      return state\n    case DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY:\n      if (state.SelectedCategory !== action.category_name) {\n        const newState = _.cloneDeep(state)\n        newState.SelectedCategory = action.category_name\n        return newState\n      }\n      return state\n    case DataConstants.CategoryConstants.CREATE_CATEGORY:\n      const newState = _.cloneDeep(state)\n      newState.Passwords[action.category_name] = { entries: {} }\n      return newState\n    default:\n      return state\n  }\n\n}\n\nexport default DataReducer","import DataReducer from './DataReducer'\nexport * from './DataActions'\nexport * from './DataReducer'\nexport * from './DataConstants'\nexport default DataReducer","const SettingsConstants = {\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS'\n}\n\nexport default SettingsConstants\n","import { Reducer } from 'redux'\nimport SettingsConstants from './SettingsConstants'\nimport { SettingsAction } from './SettingsActions'\nimport { PasswordGeneratorProps } from '../../../../Security/PasswordGenerator'\n\nexport interface SettingsState {\n  passwordGen: PasswordGeneratorProps\n}\n\nconst initialState: SettingsState = {\n  passwordGen: {}\n}\n\nconst SettingsReducer: Reducer<SettingsState, SettingsAction> = (state = initialState, action: SettingsAction) => {\n  switch (action.type) {\n    case SettingsConstants.UPDATE_SETTINGS:\n      return {\n        ...state,\n        ...action.newSettings\n      }\n    default:\n      return state\n  }\n}\n\nexport default SettingsReducer","import { Reducer } from 'redux'\nimport AuthConstats from './AuthConstants'\nimport { AuthAction } from './AuthActions'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthState {\n  GoogleToken: GoogleLoginResponse | undefined\n  masterPassword: string | undefined\n}\n\nconst initialState: AuthState = {\n  GoogleToken: undefined,\n  masterPassword: undefined\n}\n\nconst AuthReducer: Reducer<AuthState, AuthAction> = (state = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case AuthConstats.LOGIN_GOOGLE:\n      return {\n        ...state,\n        GoogleToken: (action.googleLoginResponse)\n      }\n    case AuthConstats.SET_MASTER_PASSWORD:\n      return {\n        ...state,\n        masterPassword: action.masterPassword\n      }\n    case AuthConstats.LOGOUT:\n      return initialState\n    default:\n      return state\n  }\n}\n\nexport default AuthReducer\n","import { combineReducers } from 'redux'\nimport SettingsReducer, { SettingsState } from './Settings/SettingsReducer'\nimport AuthReducer, { AuthState } from './Auth/AuthReducer'\n\nexport interface UserState {\n  Settings: SettingsState\n  Auth: AuthState\n}\n\nconst UserReducer = combineReducers<UserState>({\n  Settings: SettingsReducer,\n  Auth: AuthReducer\n})\n\nexport default UserReducer\n","export function getUserData() {\n\n}\n\n","import { call } from 'redux-saga/effects'\nimport { getUserData } from '../Requests/userData'\n\nexport function* getUserDataHandler(): any {\n  try {\n    const res = yield call(getUserData)\n    // List of files\n    console.log(res.data)\n\n  }\n  catch (error) {\n    console.log(error)\n  }\n}","import { takeEvery } from 'redux-saga/effects'\nimport { getUserDataHandler } from './Handlers/getUserDataHandler'\n\nexport function* watcherSaga() {\n  yield takeEvery('GET_USER_DATA', getUserDataHandler)\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport UIReducer, { UIState } from './Store/UI'\nimport DataReducer, { DataState } from './Store/Data'\nimport UserReducer, { UserState } from './Store/User'\nimport { watcherSaga } from './Saga/GoogleDrive/GoogleDriveSaga'\n\nexport interface RootState {\n  UI: UIState\n  User: UserState\n  Data: DataState\n}\n\nconst rootReducer = combineReducers<RootState>({\n  UI: UIReducer,\n  User: UserReducer,\n  Data: DataReducer\n})\n\nconst sagaMiddleware = createSagaMiddleware()\n\nlet enhancer = undefined\nconst middleware = [sagaMiddleware]\n\nif (process.env.NODE_ENV === 'development') {\n  enhancer = composeWithDevTools(applyMiddleware(createLogger(), ...middleware))\n}\nelse {\n  enhancer = applyMiddleware(...middleware)\n}\n\nconst store = createStore(rootReducer, enhancer)\nsagaMiddleware.run(watcherSaga)\nexport default store","import { Action, ActionCreator } from 'redux'\nimport { Entry } from '../../Data/DataReducer'\nimport EntryGridConstants from './EntryGridConstants'\nimport store from '../../../index'\n\nexport interface EntryGridAction extends Action {\n  current_page: number\n  total_pages: number\n  items: Record<string, Entry>\n}\n\nconst entryGridLoadData: ActionCreator<EntryGridAction> = (page: number = 1) => {\n  const perPage = 20\n  const currentStore = store.getState()\n  const category = currentStore.Data.SelectedCategory\n  const keys = Object.keys(currentStore.Data.Passwords[category].entries)\n  const total_pages = Math.ceil(keys.length / perPage)\n  const items: Record<string, Entry> = {}\n  keys.slice((page - 1) * perPage, page * perPage).forEach((key: string) => {\n    items[key] = store.getState().Data.Passwords[category].entries[key]\n  })\n\n  return {\n    type: EntryGridConstants.ENTRY_GRID_LOAD_DATA,\n    total_pages,\n    items,\n    current_page: page\n  }\n}\n\nconst EntryGridActions = {\n  entryGridLoadData\n}\n\nexport default EntryGridActions","import React, { useState } from 'react'\nimport _ from 'lodash'\nimport Box from '@mui/material/Box'\nimport Drawer from '@mui/material/Drawer'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport ListItem from '@mui/material/ListItem'\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile'\nimport PasswordIcon from '@mui/icons-material/Password'\nimport ListItemIcon from '@mui/material/ListItemIcon'\nimport ListItemText from '@mui/material/ListItemText'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport FolderOpenIcon from '@mui/icons-material/FolderOpen'\nimport Toolbar from '@mui/material/Toolbar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux'\nimport DataActions from '../../Redux/Store/Data/DataActions'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport Collapse from '@mui/material/Collapse'\nimport { ExpandLess, ExpandMore } from '@mui/icons-material'\nimport EntryGridActions from '../../Redux/Store/UI/EntryGrid/EntryGridActions'\n\nconst drawerWidth: number = 240\n\ninterface expansionState {\n  Passwords: boolean,\n  Files: boolean\n}\n\nconst initialExpansionState: expansionState = {\n  Passwords: true,\n  Files: false\n}\n\nexport const NavDrawer = () => {\n  const dispatch = useDispatch()\n  const userData = useSelector((state: RootState) => (state.Data))\n\n  const [expansionState, setExpansion] = useState(initialExpansionState)\n\n  const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    if (userData.SelectedCategory !== newKey) {\n      dispatch(DataActions.CategoryActions.changeSelectedCategory(newKey))\n      dispatch(EntryGridActions.entryGridLoadData())\n    }\n  }\n\n  const handleListExpansion = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    setExpansion((state) => ({\n      ...state,\n      [newKey]: !_.get(state, newKey)\n    }))\n  }\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      sx={{\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n      }}\n    >\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          <ListItemButton onClick={(event) => handleListExpansion(event, 'Passwords')}>\n            <ListItemIcon>\n              <PasswordIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Passwords\" />\n            {expansionState.Passwords ? <ExpandLess /> : <ExpandMore />}\n          </ListItemButton>\n          <Collapse in={expansionState.Passwords} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              {\n                Object.keys(userData.Passwords).map((category_name: string) => {\n                  return (\n                    <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)} sx={{ pl: 4, height: 56 }}>\n                      <ListItemIcon>\n                        {(userData.SelectedCategory === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                      </ListItemIcon>\n                      <ListItemText primary={category_name} />\n                    </ListItem>\n                  )\n                })\n              }\n            </List>\n          </Collapse>\n        </List>\n        <Divider />\n        <List>\n          <ListItemButton onClick={(event) => handleListExpansion(event, 'Files')}>\n            <ListItemIcon>\n              <InsertDriveFileIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Files\" />\n            {expansionState.Files ? <ExpandLess /> : <ExpandMore />}\n          </ListItemButton>\n          <Collapse in={expansionState.Files} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              {\n                Object.keys(userData.Files).map((category_name: string) => {\n                  return (\n                    <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)} sx={{ pl: 4 }}>\n                      <ListItemIcon>\n                        {(userData.SelectedCategory === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                      </ListItemIcon>\n                      <ListItemText primary={category_name} />\n                    </ListItem>\n                  )\n                })\n              }\n            </List>\n          </Collapse>\n        </List>\n        <Divider />\n      </Box>\n    </Drawer>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport GlobalActions from '../../../Redux/Store/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Store/Data/DataActions'\nimport TextField from '@mui/material/TextField'\n\nexport interface CreateCategoryProps {\n  isOpen: boolean\n}\n\ninterface CreateCategoryState {\n  category: string\n}\n\nconst initialState: CreateCategoryState = { category: '' }\n\nexport const CreateCategory = (props: CreateCategoryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateCategoryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.category) {\n      dispatch(DataActions.CategoryActions.createNewCategory(values.category))\n    }\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Category\"}\n        </DialogTitle>\n        <DialogContent>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              focused\n              required\n              label=\"Category\"\n              id=\"category\"\n              value={values.category}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IconButton from '@mui/material/IconButton'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport { checkPasswordStrength, generatePassword } from '../../../Security/PasswordGenerator'\nimport Box from '@mui/material/Box'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Typography from '@mui/material/Typography'\nimport GlobalActions from '../../../Redux/Store/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Store/Data/DataActions'\nimport { RootState } from '../../../Redux'\nimport TextField from '@mui/material/TextField'\nimport OutlinedInput from '@mui/material/OutlinedInput'\nimport { FormHelperText } from '@mui/material'\nimport EntryGridActions from '../../../Redux/Store/UI/EntryGrid/EntryGridActions'\n\ninterface CreateEntryState {\n  username: string\n  password: string\n  url: string\n  name: string\n  passwordStrength: { lowercase: boolean, uppercase: boolean, number: boolean, symbol: boolean, value: string }\n}\n\nexport interface CreateEntryProps {\n  isOpen: boolean\n  values?: Omit<CreateEntryState, 'passwordStrength'>\n}\n\nexport const CreateEntry = (props: CreateEntryProps) => {\n  const theme = useTheme()\n  const masterPassword = useSelector((state: RootState) => state.User.Auth.masterPassword)\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n\n  let initialState: CreateEntryState = {\n    username: '',\n    password: '',\n    url: 'http://',\n    name: '',\n    passwordStrength: {\n      lowercase: false,\n      uppercase: false,\n      number: false,\n      symbol: false,\n      value: 'Too weak'\n    }\n  }\n\n  if (props.values) {\n    initialState = { ...initialState, ...props.values }\n  }\n\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n  const currentCategory = useSelector((state: RootState) => state.Data.SelectedCategory)\n  const pwGenerationSettings = useSelector((state: RootState) => state.User.Settings.passwordGen)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n\n    if (changeEvent.target.id === 'password') {\n      checkPassword(changeEvent.target.value)\n    }\n  }\n\n  const checkPassword = (password: string) => {\n    const pwStrength = checkPasswordStrength(password)\n    const pwst = { ...initialState.passwordStrength }\n\n    pwStrength.contains.forEach((value) => {\n      pwst[value] = true\n    })\n\n    pwst.value = pwStrength.value\n    setValues((state) => ({\n      ...state,\n      passwordStrength: pwst\n    }))\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n    dispatch(EntryGridActions.entryGridLoadData())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.username) {\n      dispatch(DataActions.EntryActions.createNewEntry(currentCategory, values.username, values.password, values.url, values.name, masterPassword))\n    }\n    handleClose()\n  }\n\n  const generatePasswd = () => {\n    const generatedPW = generatePassword(pwGenerationSettings)\n    setValues((prevState: CreateEntryState) => ({\n      ...prevState,\n      password: generatedPW\n    }))\n    checkPassword(generatedPW)\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Entry\"}\n        </DialogTitle>\n        <DialogContent>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              required\n              focused\n              label=\"Name\"\n              id=\"name\"\n              value={values.name}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              required\n              label=\"Username\"\n              id=\"username\"\n              value={values.username}\n              onChange={handleChange}\n            />\n          </FormControl>\n\n          <FormControl variant=\"outlined\" fullWidth margin='dense' required>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <OutlinedInput\n              label=\"Password\"\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Typography align='right' minWidth={'5ch'}>{values.password.length}</Typography>\n                  <IconButton\n                    aria-label=\"generate a new password\"\n                    onClick={generatePasswd}\n                  >\n                    <AutorenewIcon />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n            <FormHelperText>\n              <Box alignContent={'center'} alignSelf={'center'}>\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.lowercase} />} label=\"Lowercase\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.uppercase} />} label=\"Uppercase\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.number} />} label=\"Number\" />\n                <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.symbol} />} label=\"Symbol\" />\n                <Typography align='right' color={'Highlight'} variant='caption'>{values.passwordStrength.value}</Typography>\n              </Box>\n            </FormHelperText>\n          </FormControl>\n          <Box>\n            <Typography paragraph>\n\n            </Typography>\n          </Box>\n          <FormControl variant=\"outlined\" fullWidth margin='dense'>\n            <TextField\n              label=\"URL\"\n              id=\"url\"\n              value={values.url}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import generator from 'generate-password'\nimport { passwordStrength, Options } from 'check-password-strength'\n\nexport interface PasswordGeneratorProps {\n  length?: number\n  numbers?: boolean\n  symbols?: boolean | string\n  lowercase?: boolean\n  uppercase?: boolean\n  excludeSimilarCharacters?: boolean\n  exclude?: string\n}\n\nexport const generatePassword = (props?: PasswordGeneratorProps) => {\n  return generator.generate({\n    ...props,\n    strict: true\n  })\n}\n\nexport const checkPasswordStrength = (password: string) => {\n  const strengthOptions: Options<string> = [\n    {\n      id: 0,\n      value: \"Too weak\",\n      minDiversity: 0,\n      minLength: 0\n    },\n    {\n      id: 1,\n      value: \"Weak\",\n      minDiversity: 2,\n      minLength: 6\n    },\n    {\n      id: 2,\n      value: \"Medium\",\n      minDiversity: 3,\n      minLength: 12\n    },\n    {\n      id: 3,\n      value: \"Strong\",\n      minDiversity: 4,\n      minLength: 16\n    },\n    {\n      id: 4,\n      value: \"Very Strong\",\n      minDiversity: 4,\n      minLength: 32\n    },\n    {\n      id: 5,\n      value: \"Very Strong\",\n      minDiversity: 3,\n      minLength: 36\n    }\n  ]\n\n  return passwordStrength(password, strengthOptions)\n}","import React from 'react'\nimport Dialog from '@mui/material/Dialog'\nimport DialogContent from '@mui/material/DialogContent'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useSelector } from 'react-redux'\nimport { LoginWithGoogle } from '../../LoginWithGoogle/LoginWithGoogle'\nimport { RootState } from '../../../Redux'\n\ninterface GoogleAuthProps {\n  isOpen: boolean\n}\n\nexport const GoogleAuth = (props: GoogleAuthProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const auth = useSelector((state: RootState) => state.User.Auth.GoogleToken)\n\n  return (\n    <div>\n      <Dialog fullScreen={fullScreen} open={!Boolean(auth)} >\n        <DialogContent sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n          <LoginWithGoogle />\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/Store/UI/Global/GlobalActions'\nimport UserActions from '../../../Redux/Store/User/Auth/AuthActions'\n\nexport interface MasterPasswordProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  password: string\n}\n\nconst initialState = {\n  password: ''\n}\n\nexport const MasterPassword = (props: MasterPasswordProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if (checkPassword(changeEvent.target.value)) {\n      setValues({\n        ...values,\n        [changeEvent.target.id]: changeEvent.target.value\n      })\n    }\n  }\n\n  const checkPassword = (password: string): boolean => {\n    return false\n  }\n\n  const handleClose = () => {\n    if (values) {\n      dispatch(UserActions.setMasterPassword(values.password))\n      setValues(() => initialState)\n      dispatch(GlobalActions.closeAllDialogs())\n    }\n  }\n\n  const handleCreateAndClose = () => {\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Enter Your Master Password\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter your master password\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Unlock\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/Store/UI/Global/GlobalActions'\n\nexport interface UserSettingsProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  password: string\n}\n\nconst initialState = {\n  password: ''\n}\n\nexport const UserSettings = (props: UserSettingsProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    if (values) {\n      setValues(() => initialState)\n      dispatch(GlobalActions.closeAllDialogs())\n    }\n  }\n\n  const handleCreateAndClose = () => {\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Settings\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Settings\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Setting 1</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} autoFocus>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux'\nimport { CreateCategory } from './CreateCategory/CreateCategory'\nimport { CreateEntry } from './CreateEntry/CreateEntry'\nimport { GoogleAuth } from './GoogleAuth/GoogleAuth'\nimport { MasterPassword } from './MasterPassword/MasterPassword'\nimport { UserSettings } from './UserSettings/UserSettings'\n\nexport const Dialogs = () => {\n  const state = useSelector((state: RootState) => state.UI.Global)\n\n  return (\n    <>\n      <GoogleAuth isOpen={true} />\n      <CreateCategory isOpen={state.NewCategory} />\n      <CreateEntry isOpen={state.NewEntry} />\n      <MasterPassword isOpen={state.MasterPassword} />\n      <UserSettings isOpen={state.UserSettings} />\n    </>\n  )\n}","import React, { useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardHeader from '@mui/material/CardHeader'\nimport Avatar from '@mui/material/Avatar'\nimport IconButton from '@mui/material/IconButton'\nimport CardContent from '@mui/material/CardContent'\nimport Typography from '@mui/material/Typography'\nimport MoreIcon from '@mui/icons-material/MoreVert'\nimport Menu from '@mui/material/Menu'\nimport MenuItem from '@mui/material/MenuItem'\nimport Link from '@mui/material/Link'\n\ninterface EntryCardProps {\n  name: string\n  url: string\n  user: string\n  pass: string\n}\n\ninterface CardState {\n  anchorEl: null | HTMLElement\n  elevation: number\n}\n\nconst initialState: CardState = {\n  anchorEl: null,\n  elevation: 1\n}\n\nconst EntryCard = (props: EntryCardProps) => {\n  const [state, setState] = useState(initialState)\n\n  const copyCellData = async (str: string) => {\n    if (navigator.clipboard) {\n      await navigator.clipboard.writeText(str)\n    }\n  }\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setState((pState) => ({ ...pState, anchorEl: event.currentTarget }))\n  }\n\n  const handleEditClick = () => {\n    handleClose()\n  }\n\n  const handleDeleteClick = () => {\n    handleClose()\n  }\n\n  const handleClose = () => {\n    setState((pState) => ({ ...pState, anchorEl: null }))\n  }\n\n  const isUrl = (props.url && props.url !== 'http://' && props.url !== 'https://')\n\n  const cardAction = () => {\n    return (<span>\n      <IconButton onClick={handleMenu}>\n        <MoreIcon />\n      </IconButton>\n      <Menu\n        id=\"menu-appbar\"\n        anchorEl={state.anchorEl}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        keepMounted\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={Boolean(state.anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleEditClick}>\n          Edit\n        </MenuItem>\n        <MenuItem onClick={handleDeleteClick}>\n          Delete\n        </MenuItem>\n      </Menu>\n    </span>)\n  }\n\n  const cardHeader = () => {\n    if (isUrl) {\n      return <Link underline=\"hover\" variant='body2' href={props.url} target={\"_blank\"}>{props.url}</Link>\n    }\n  }\n\n  const updateElevation = () => {\n    if (state.elevation === 7) {\n      setState((pState) => ({ ...pState, elevation: 1 }))\n    }\n    else {\n      setState((pState) => ({ ...pState, elevation: 7 }))\n    }\n  }\n\n  let iconUrl = ''\n\n  if (isUrl) {\n    iconUrl = `https://www.google.com/s2/favicons?sz=64&domain=${props.url.replace('http://', '').replace('https://', '')}`\n  }\n  else {\n    iconUrl = 'https://www.google.com/s2/favicons?sz=64&domain=nothing'\n  }\n\n\n  return (\n    <Card elevation={state.elevation} onMouseEnter={updateElevation} onMouseLeave={updateElevation} sx={{ minWidth: '300px', maxWidth: '500px' }}>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: '#fff' }} src={iconUrl} aria-label=\"recipe\">\n            {props.name.substring(0, 1)}\n          </Avatar>\n        }\n        action={cardAction()}\n        title={<Typography noWrap maxWidth={200}>{props.name}</Typography>}\n        subheader={cardHeader()}\n      />\n      <CardContent>\n        <Typography noWrap gutterBottom variant=\"body2\" color=\"text.secondary\" onClick={() => copyCellData(props.user)}>\n          Username: {props.user}\n        </Typography>\n        <Typography noWrap gutterBottom variant=\"body2\" color=\"text.secondary\" onClick={() => copyCellData(props.pass)}>\n          Password: {props.pass}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default EntryCard\n","import React from 'react'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport { RootState } from '../../Redux'\nimport { useDispatch, useSelector } from 'react-redux'\nimport EntryCard from '../EntryCard/EntryCard'\nimport { Pagination, Stack } from '@mui/material'\nimport EntryGridActions from '../../Redux/Store/UI/EntryGrid/EntryGridActions'\n\nconst EntryGrid = () => {\n  const dispatch = useDispatch()\n  const entrygridData = useSelector((state: RootState) => state.UI.EntryGrid)\n\n  const cards: React.ReactNode[] = []\n  Object.keys(entrygridData.items).forEach((key) => {\n    const entry = entrygridData.items[key]\n    cards.push(\n      <Grid item xs key={entry.id}>\n        <EntryCard name={entry.name} url={entry.url} user={entry.user} pass={entry.pass} />\n      </Grid>\n    )\n  })\n\n  const pageChange = (event: React.ChangeEvent<unknown>, page: number) => {\n    dispatch(EntryGridActions.entryGridLoadData(page))\n  }\n\n  let pages = <></>\n\n  if (entrygridData.total_pages > 0) {\n    pages = <Pagination sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }} shape=\"rounded\" variant=\"outlined\" color=\"primary\" showFirstButton showLastButton count={entrygridData.total_pages} page={entrygridData.current_page} boundaryCount={2} onChange={pageChange} />\n  }\n\n  return (\n    <Stack spacing={4} >\n      <Box sx={{ flexGrow: 1 }}>\n        <Grid container spacing={2}>\n          {cards}\n        </Grid>\n      </Box>\n\n      {pages}\n\n    </Stack>\n  )\n}\n\nexport default EntryGrid\n","import React from 'react'\nimport Box from '@mui/material/Box'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Toolbar from '@mui/material/Toolbar'\nimport { MainAppBar } from '../MainAppBar/MainAppBar'\nimport { AddFab } from '../AddFab/AddFab'\nimport { NavDrawer } from '../NavDrawer/NavDrawer'\nimport { Dialogs } from '../Dialogs/Dialogs'\nimport EntryGrid from '../EntryGrid/EntryGrid'\n\nexport const Navigator = () => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Dialogs />\n      <CssBaseline />\n      <MainAppBar />\n      <NavDrawer />\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <Toolbar />\n        <EntryGrid />\n      </Box>\n      <AddFab />\n    </Box>\n  )\n}","import React from 'react'\nimport Slide from '@mui/material/Slide'\nimport Snackbar from '@mui/material/Snackbar'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\nimport { RootState } from '../../Redux'\nimport { useSelector } from 'react-redux'\nimport { SnackbarAlertStatus } from '../../Redux/Store/UI/Snackbar/SnackbarConstants'\n\nexport interface AlertSnackbarProps {\n  message: string\n  status: SnackbarAlertStatus\n  delay?: number\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n})\n\nAlert.displayName = 'Alert'\n\nexport const AlertSnackbar = (props: AlertSnackbarProps) => {\n  const [open, setOpen] = React.useState(true)\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const action = (\n    <React.Fragment>\n      <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  )\n\n  return (\n    <Snackbar\n      open={open}\n      TransitionComponent={Slide}\n      autoHideDuration={props.delay || 3000}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      action={action}\n    >\n      <Alert onClose={handleClose} severity={props.status} sx={{ width: '100%' }}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  )\n}\n\nexport const GlobalAlertSnackbar = () => {\n  const state = useSelector((state: RootState) => state.UI.Snackbar)\n  if (state.message !== '') {\n    return <AlertSnackbar message={state.message} status={state.status} />\n  }\n  return <></>\n}\n","import React from 'react'\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport const ProgressCircle = () => {\n  return <CircularProgress />\n}","import React from 'react'\nimport { Navigator } from './Navigator/Navigator'\nimport { GlobalAlertSnackbar } from './AlertSnackbar/AlertSnackbar'\nimport { ProgressCircle } from './ProgressCircle/ProgressCircle'\nimport { useTimeout } from 'usehooks-ts'\nimport { useDispatch, useSelector } from 'react-redux'\nimport GlobalActions from '../Redux/Store/UI/Global/GlobalActions'\nimport { RootState } from '../Redux'\nimport { useLogin } from './LoginWithGoogle/LoginWithGoogle'\n\nconst AppLoadingContent = () => {\n  return (\n    <>\n      <ProgressCircle />\n    </>\n  )\n}\n\nconst MainAppContent = () => {\n  return (\n    <>\n      <Navigator />\n    </>\n  )\n}\n\nconst App = () => {\n  const dispatch = useDispatch()\n  useLogin()\n  useTimeout(() => {\n    dispatch(GlobalActions.endAppLoading())\n  }, 3000)\n\n  const loadingState = useSelector((state: RootState) => state.UI.Global.AppLoading)\n\n  let content = <AppLoadingContent />\n  if (!loadingState) {\n    content = <MainAppContent />\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalAlertSnackbar />\n      {content}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport _ from 'lodash'\nimport App from './Components/App'\nimport reportWebVitals from './reportWebVitals'\nimport store from './Redux'\nimport { Provider } from 'react-redux'\nimport { GoogleApiProvider } from 'react-gapi'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GoogleApiProvider clientId={_.get(process.env, 'REACT_APP_GOOGLE_API_KEY', '')}>\n        <App />\n      </GoogleApiProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}