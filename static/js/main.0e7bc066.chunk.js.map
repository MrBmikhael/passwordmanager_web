{"version":3,"sources":["Redux/UI/Snackbar/SnackbarConstants.ts","Redux/User/Auth/AuthConstants.ts","Redux/User/Auth/AuthActions.ts","Redux/UI/Snackbar/SnackbarActions.ts","Redux/UI/Snackbar/SnackbarReducer.ts","Redux/UI/ProgressBar/ProgressBarConstants.ts","Redux/UI/ProgressBar/ProgressBarReducer.ts","Redux/UI/Global/GlobalConstants.ts","Redux/UI/Global/GlobalReducer.ts","Redux/UI/index.ts","Redux/Data/DataConstants.ts","Redux/Data/DataReducer.ts","Redux/Data/DataActions.ts","Redux/Data/index.ts","Redux/User/Settings/SettingsConstants.ts","Redux/User/Settings/SettingsReducer.ts","Redux/User/Auth/AuthReducer.ts","Redux/User/index.ts","Redux/store.ts","DataHandler/CloudStorage/GoogleDriveAPI.ts","Components/LoginWithGoogle/LoginWithGoogle.tsx","Components/LinearProgressBar/LinearProgressBar.tsx","Components/MainAppBar/MainAppBar.tsx","Redux/UI/Global/GlobalActions.ts","Components/AddFab/AddFab.tsx","Components/NavDrawer/NavDrawer.tsx","Components/Dialogs/CreateCategory/CreateCategory.tsx","Components/Dialogs/CreateEntry/CreateEntry.tsx","Security/PasswordGenerator.ts","Components/Dialogs/MasterPassword/MasterPassword.tsx","Components/Dialogs/Dialogs.tsx","Hooks/useWindowDimensions.ts","Components/EntryTable/EntryTable.tsx","Components/Navigator/Navigator.tsx","Components/AlertSnackbar/AlertSnackbar.tsx","Components/ProgressCircle/ProgressCircle.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SnackbarAlertStatus","AuthConstants","LOGIN_GOOGLE","SET_MASTER_PASSWORD","CLEAR_MASTER_PASSWORD","LOGOUT","UserActions","loginUsingGoogle","googleLoginResponse","type","setMasterPassword","masterPassword","clear_master_password","logout","SnackbarConstants","VIEW_SNACKBAR_ALERT","SnackbarActions","viewSnackbarAlert","status","message","initialState","info","SnackbarReducer","state","action","ProgressBarConstants","SET_PROGRESS_VALUE","ENABLE_INDETERMINATE_PROGRESS_BAR","DISABLE_INDETERMINATE_PROGRESS_BAR","progress","indeterminate","ProgressBarReducer","GlobalConstants","END_APP_LOADING","OPEN_NEW_ENTRY_DIALOG","OPEN_NEW_CATEGORY_DIALOG","OPEN_MASTER_PASSWORD_DIALOG","CLOSE_DIALOG","AppLoading","NewEntry","NewCategory","MasterPassword","GlobalReducer","UIReducer","combineReducers","Global","ProgressBar","Snackbar","DataConstants","CREATE_ENTRY","DELETE_ENTRY","CREATE_CATEGORY","DELETE_CATEGORY","CHANGE_SELECTED_CATEGORY","defaultCategoryName","Data","entries","SelectedCategory","DataReducer","user","_","get","pass","url","id","Math","random","toString","substr","newEntry","category_name","DataActions","EntryActions","createNewEntry","entry_user","entry_pass","deleteEntry","entry_id","CategoryActions","createNewCategory","deleteCategory","changeSelectedCategory","SettingsConstants","UPDATE_SETTINGS","passwordGen","SettingsReducer","newSettings","GoogleToken","undefined","AuthReducer","AuthConstats","UserReducer","Settings","Auth","rootReducer","UI","User","store","createStore","GoogleDriveAPI","API_KEY","process","axiosInstance","token_type","getState","access_token","this","axios","create","baseURL","timeout","headers","Authorization","params","includeDeleted","extraParams","res","data","fileName","method","name","folderName","createFile","listFiles","files","find","getFileByName","createFolder","then","Promise","all","instance","GoogleLoginProps","clientId","cookiePolicy","scope","join","isSignedIn","onSuccess","response","dispatch","AuthActions","success","getInstance","createInitialFiles","onFailure","console","error","LoginWithGoogle","useDispatch","Logout","onLogoutSuccess","buttonText","LinearProgressBar","useSelector","props","value","variant","LinearProgress","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","color","paddingLeft","transition","transitions","MainAppBar","userData","IconButton","size","edge","Avatar","alt","profileObj","src","imageUrl","sx","Box","AppBar","zIndex","drawer","Toolbar","Typography","noWrap","component","placeholder","inputProps","flexGrow","xs","md","GlobalActions","endAppLoading","openNewCategoryDialog","openNewEntryDialog","closeAllDialogs","AddFab","React","useState","open","setOpen","handleClose","actions","icon","onClick","SpeedDial","ariaLabel","bottom","right","SpeedDialIcon","onClose","onOpen","map","SpeedDialAction","tooltipTitle","NavDrawer","categories","selectedCat","Drawer","flexShrink","boxSizing","overflow","List","Object","keys","ListItem","button","event","newKey","ListItemIcon","ListItemText","primary","Divider","category","CreateCategory","useTheme","fullScreen","useMediaQuery","down","values","setValues","Dialog","isOpen","DialogTitle","DialogContent","DialogContentText","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","changeEvent","target","DialogActions","Button","autoFocus","username","password","passwordStrength","lowercase","uppercase","number","symbol","CreateEntry","currentCategory","pwGenerationSettings","handleChange","checkPassword","pwStrength","minDiversity","minLength","checkPasswordStrength","pwst","contains","forEach","endAdornment","InputAdornment","align","minWidth","length","generatedPW","generator","generate","strict","generatePassword","prevState","FormControlLabel","disabled","control","Checkbox","checked","label","Dialogs","getWindowDimensions","window","innerWidth","innerHeight","EntryTable","selectedCategoryName","selectedCategory","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","rows","logger","debug","str","log","warn","copyCellData","cell","a","navigator","clipboard","writeText","style","columns","field","headerName","onCellClick","onCellDoubleClick","Navigator","CssBaseline","p","Alert","forwardRef","ref","elevation","displayName","AlertSnackbar","reason","Fragment","fontSize","TransitionComponent","Slide","autoHideDuration","delay","anchorOrigin","vertical","horizontal","severity","GlobalAlertSnackbar","ProgressCircle","CircularProgress","AppLoadingContent","MainAppContent","App","events","useGoogleLogin","assign","useLogin","useTimeout","loadingState","content","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7bc066.chunk.js","sourcesContent":["export enum SnackbarAlertStatus {\n  success = 'success',\n  info = 'info',\n  warning = 'warning',\n  error = 'error'\n}\n\nconst SnackbarConstants = {\n  VIEW_SNACKBAR_ALERT: 'VIEW_SNACKBAR_ALERT'\n}\n\nexport default SnackbarConstants","const AuthConstants = {\n  LOGIN_GOOGLE: 'LOGIN_GOOGLE',\n  SET_MASTER_PASSWORD: 'SET_MASTER_PASSWORD',\n  CLEAR_MASTER_PASSWORD: 'CLEAR_MASTER_PASSWORD',\n  LOGOUT: 'LOGOUT'\n}\n\nexport default AuthConstants","import { Action, ActionCreator } from 'redux'\nimport AuthConstants from './AuthConstants'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthAction extends Action {\n  googleLoginResponse?: GoogleLoginResponse\n  masterPassword?: string\n}\n\nconst loginUsingGoogle: ActionCreator<AuthAction> = (googleLoginResponse: GoogleLoginResponse) => {\n  return { type: AuthConstants.LOGIN_GOOGLE, googleLoginResponse }\n}\n\nconst setMasterPassword: ActionCreator<AuthAction> = (masterPassword: string) => {\n  return { type: AuthConstants.SET_MASTER_PASSWORD, masterPassword }\n}\n\nconst clear_master_password: ActionCreator<Action> = () => {\n  return { type: AuthConstants.CLEAR_MASTER_PASSWORD }\n}\n\nconst logout: ActionCreator<Action> = () => {\n  return { type: AuthConstants.LOGOUT }\n}\n\nconst UserActions = {\n  loginUsingGoogle,\n  setMasterPassword,\n  clear_master_password,\n  logout\n}\n\nexport default UserActions\n","import { Action, ActionCreator } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\n\nexport interface SnackbarAlertAction extends Action {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst viewSnackbarAlert: ActionCreator<SnackbarAlertAction> = (status: SnackbarAlertStatus, message: string) => ({\n  type: SnackbarConstants.VIEW_SNACKBAR_ALERT,\n  status,\n  message\n})\n\nconst SnackbarActions = {\n  viewSnackbarAlert\n}\n\nexport default SnackbarActions\n","import { Reducer } from 'redux'\nimport SnackbarConstants, { SnackbarAlertStatus } from './SnackbarConstants'\nimport { SnackbarAlertAction } from './SnackbarActions'\n\nexport interface SnackbarState {\n  message: string\n  status: SnackbarAlertStatus\n}\n\nconst initialState: SnackbarState = {\n  message: '',\n  status: SnackbarAlertStatus.info\n}\n\nconst SnackbarReducer: Reducer<SnackbarState, SnackbarAlertAction> = (state = initialState, action: SnackbarAlertAction) => {\n  switch (action.type) {\n    case SnackbarConstants.VIEW_SNACKBAR_ALERT:\n      return {\n        ...state,\n        message: action.message,\n        status: action.status\n      }\n    default:\n      return state\n  }\n}\n\nexport default SnackbarReducer\n","const ProgressBarConstants = {\n  SET_PROGRESS_VALUE: 'SET_PROGRESS_VALUE',\n  ENABLE_INDETERMINATE_PROGRESS_BAR: 'ENABLE_INDETERMINATE_PROGRESS_BAR',\n  DISABLE_INDETERMINATE_PROGRESS_BAR: 'DISABLE_INDETERMINATE_PROGRESS_BAR'\n}\n\nexport default ProgressBarConstants","import { Reducer } from 'redux'\nimport { ProgressBarAction } from './ProgressBarActions'\nimport ProgressBarConstants from './ProgressBarConstants'\n\nexport interface ProgressBarState {\n  progress: number\n  indeterminate: boolean\n}\n\nconst initialState = {\n  progress: 0,\n  indeterminate: false\n}\n\nconst ProgressBarReducer: Reducer<ProgressBarState, ProgressBarAction> = (state = initialState, action: ProgressBarAction) => {\n  switch (action.type) {\n    case ProgressBarConstants.DISABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: false\n      }\n    case ProgressBarConstants.ENABLE_INDETERMINATE_PROGRESS_BAR:\n      return {\n        ...state,\n        progress: 0,\n        indeterminate: true\n      }\n    case ProgressBarConstants.SET_PROGRESS_VALUE:\n      return {\n        ...state,\n        progress: action.progress,\n        indeterminate: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default ProgressBarReducer\n","const GlobalConstants = {\n  END_APP_LOADING: 'END_APP_LOADING',\n  OPEN_NEW_ENTRY_DIALOG: 'OPEN_NEW_ENTRY_DIALOG',\n  OPEN_NEW_CATEGORY_DIALOG: 'OPEN_NEW_CATEGORY_DIALOG',\n  OPEN_MASTER_PASSWORD_DIALOG: 'OPEN_MASTER_PASSWORD_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n}\n\nexport default GlobalConstants\n","import { Reducer, Action } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nexport interface GlobalState {\n  AppLoading: boolean\n  NewEntry: boolean\n  NewCategory: boolean\n  MasterPassword: boolean\n}\n\nconst initialState: GlobalState = {\n  AppLoading: true,\n  NewEntry: false,\n  NewCategory: false,\n  MasterPassword: false\n}\n\nconst GlobalReducer: Reducer<GlobalState, Action> = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case GlobalConstants.END_APP_LOADING:\n      return {\n        ...state,\n        AppLoading: false\n      }\n    case GlobalConstants.OPEN_NEW_CATEGORY_DIALOG:\n      return {\n        ...state,\n        NewEntry: false,\n        NewCategory: true\n      }\n    case GlobalConstants.OPEN_NEW_ENTRY_DIALOG:\n      return {\n        ...state,\n        NewEntry: true,\n        NewCategory: false\n      }\n    case GlobalConstants.OPEN_MASTER_PASSWORD_DIALOG:\n      return {\n        ...state,\n        NewEntry: false,\n        NewCategory: false,\n        MasterPassword: true\n      }\n    case GlobalConstants.CLOSE_DIALOG:\n      return {\n        ...state,\n        NewEntry: false,\n        NewCategory: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default GlobalReducer\n","import { combineReducers } from 'redux'\nimport SnackbarReducer, { SnackbarState } from \"./Snackbar/SnackbarReducer\"\nimport ProgressBarReducer, { ProgressBarState } from \"./ProgressBar/ProgressBarReducer\"\nimport GlobalReducer, { GlobalState } from \"./Global/GlobalReducer\"\n\nexport interface UIState {\n  Global: GlobalState\n  ProgressBar: ProgressBarState\n  Snackbar: SnackbarState\n}\n\nconst UIReducer = combineReducers<UIState>({\n  Global: GlobalReducer,\n  ProgressBar: ProgressBarReducer,\n  Snackbar: SnackbarReducer\n})\n\nexport default UIReducer\n","\nconst EntryConstants = {\n  CREATE_ENTRY: 'CREATE_ENTRY',\n  DELETE_ENTRY: 'DELETE_ENTRY'\n}\n\nconst CategoryConstants = {\n  CREATE_CATEGORY: 'CREATE_CATEGORY',\n  DELETE_CATEGORY: 'DELETE_CATEGORY',\n  CHANGE_SELECTED_CATEGORY: 'CHANGE_SELECTED_CATEGORY'\n}\n\nexport const DataConstants = { EntryConstants, CategoryConstants }","import _ from 'lodash'\nimport { Reducer } from 'redux'\nimport { DataAction } from './DataActions'\nimport { DataConstants } from './DataConstants'\n\nexport interface Entry {\n  id: string\n  user: string\n  pass: string\n  url: string\n}\n\nexport interface Category {\n  entries: Record<string, Entry>\n}\n\nexport interface DataState {\n  Data: Record<string, Category>\n  SelectedCategory: string\n}\n\nconst initialState = (): DataState => {\n  const defaultCategory: Category = { entries: {} }\n  const defaultCategoryName: string = \"Default\"\n  return (\n    {\n      Data: {\n        [defaultCategoryName]: defaultCategory\n      },\n      SelectedCategory: defaultCategoryName\n    }\n  )\n}\n\nconst DataReducer: Reducer<DataState, DataAction> = (state = initialState(), action: DataAction) => {\n  switch (action.type) {\n    case DataConstants.EntryConstants.CREATE_ENTRY:\n      const user = _.get(action, 'entry_user')\n      const pass = _.get(action, 'entry_pass', '')\n      const url = _.get(action, 'url', '')\n\n      if (user) {\n        const id: string = '_' + Math.random().toString(36).substr(2, 16)\n        const newEntry: Entry = { id, user, pass, url }\n        const SelectedCategory: string = state.SelectedCategory\n        state.Data[SelectedCategory].entries[id] = newEntry\n\n        return {\n          ...state,\n          Data: {\n            ...state.Data,\n            [SelectedCategory]: { entries: state.Data[SelectedCategory].entries }\n          }\n        }\n      }\n      return state\n    case DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY:\n      return {\n        ...state,\n        SelectedCategory: action.category_name\n      }\n    case DataConstants.CategoryConstants.CREATE_CATEGORY:\n      return {\n        ...state,\n        Data: {\n          ...state.Data,\n          [action.category_name]: { entries: {} }\n        }\n      }\n    default:\n      return state\n  }\n\n}\n\nexport default DataReducer","import { Action, ActionCreator } from 'redux'\nimport { DataConstants } from './DataConstants'\n\nexport interface DataAction extends Action {\n  category_name: string\n  new_category_name?: string\n  entry_user?: string\n  entry_pass?: string\n  entry_id?: string\n  url?: string\n}\n\nconst createNewCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CREATE_CATEGORY, category_name\n})\nconst deleteCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.DELETE_CATEGORY, category_name\n})\nconst changeSelectedCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY, category_name\n})\n\nconst createNewEntry: ActionCreator<DataAction> = (category_name: string, entry_user: string, entry_pass: string, url: string) => ({\n  type: DataConstants.EntryConstants.CREATE_ENTRY, category_name, entry_user, entry_pass, url\n})\nconst deleteEntry: ActionCreator<DataAction> = (category_name: string, entry_id: string) => ({\n  type: DataConstants.EntryConstants.DELETE_ENTRY, category_name, entry_id\n})\n\nconst CategoryActions = { createNewCategory, deleteCategory, changeSelectedCategory }\nconst EntryActions = { createNewEntry, deleteEntry }\n\nconst DataActions = { EntryActions, CategoryActions }\nexport default DataActions","import DataReducer from './DataReducer'\nexport * from './DataActions'\nexport * from './DataReducer'\nexport * from './DataConstants'\nexport default DataReducer","const SettingsConstants = {\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS'\n}\n\nexport default SettingsConstants\n","import { Reducer } from 'redux'\nimport SettingsConstants from './SettingsConstants'\nimport { SettingsAction } from './SettingsActions'\nimport { PasswordGeneratorProps } from '../../../Security/PasswordGenerator'\n\nexport interface SettingsState {\n  passwordGen: PasswordGeneratorProps\n}\n\nconst initialState: SettingsState = {\n  passwordGen: {}\n}\n\nconst SettingsReducer: Reducer<SettingsState, SettingsAction> = (state = initialState, action: SettingsAction) => {\n  switch (action.type) {\n    case SettingsConstants.UPDATE_SETTINGS:\n      return {\n        ...state,\n        ...action.newSettings\n      }\n    default:\n      return state\n  }\n}\n\nexport default SettingsReducer","import { Reducer } from 'redux'\nimport AuthConstats from './AuthConstants'\nimport { AuthAction } from './AuthActions'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface AuthState {\n  GoogleToken: GoogleLoginResponse | undefined\n  masterPassword: string | undefined\n}\n\nconst initialState: AuthState = {\n  GoogleToken: undefined,\n  masterPassword: undefined\n}\n\nconst AuthReducer: Reducer<AuthState, AuthAction> = (state = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case AuthConstats.LOGIN_GOOGLE:\n      return {\n        ...state,\n        GoogleToken: (action.googleLoginResponse)\n      }\n    case AuthConstats.SET_MASTER_PASSWORD:\n      return {\n        ...state,\n        masterPassword: action.masterPassword\n      }\n    case AuthConstats.LOGOUT:\n      return initialState\n    default:\n      return state\n  }\n}\n\nexport default AuthReducer\n","import { combineReducers } from 'redux'\nimport SettingsReducer, { SettingsState } from './Settings/SettingsReducer'\nimport AuthReducer, { AuthState } from './Auth/AuthReducer'\n\nexport interface UserState {\n  Settings: SettingsState\n  Auth: AuthState\n}\n\nconst UserReducer = combineReducers<UserState>({\n  Settings: SettingsReducer,\n  Auth: AuthReducer\n})\n\nexport default UserReducer\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport UIReducer, { UIState } from './UI'\nimport DataReducer, { DataState } from './Data'\nimport UserReducer, { UserState } from './User'\n\nexport interface RootState {\n  UI: UIState\n  User: UserState\n  Data: DataState\n}\n\nconst rootReducer = combineReducers<RootState>({\n  UI: UIReducer,\n  User: UserReducer,\n  Data: DataReducer\n})\n\nlet enhancer = undefined\nif (process.env.NODE_ENV === 'development') {\n  enhancer = composeWithDevTools(applyMiddleware(createLogger()))\n}\n\nconst store = createStore(rootReducer, enhancer)\nexport default store","import axios, { AxiosInstance } from 'axios'\nimport _ from 'lodash'\nimport store from '../../Redux/store'\n\nclass GoogleDriveAPI {\n  private API_KEY: string = _.get(process.env, 'REACT_APP_GOOGLE_API_KEY', '')\n  private axiosInstance: AxiosInstance | null = null\n  private static instance: GoogleDriveAPI | null = null\n\n  public static getInstance(): GoogleDriveAPI {\n    if (this.instance === null) {\n      this.instance = new GoogleDriveAPI()\n    }\n    return this.instance\n  }\n\n  private constructor() {\n    const token_type: string = _.get(store.getState().User.Auth.GoogleToken, 'tokenObj.token_type')\n    const access_token: string = _.get(store.getState().User.Auth.GoogleToken, 'tokenObj.access_token')\n\n    this.axiosInstance = axios.create({\n      baseURL: 'https://www.googleapis.com/drive/v3/',\n      timeout: 3000,\n      headers: { Authorization: `${token_type} ${access_token}` },\n      params: { 'key': this.API_KEY }\n    })\n  }\n\n  public async listFiles(includeDeleted = false, extraParams?: any) {\n    if (this.axiosInstance) {\n      const params = {\n        ...extraParams\n      }\n\n      if (!includeDeleted) {\n        params['q'] = 'trashed=false'\n      }\n\n      const res = await this.axiosInstance(`files`, { params })\n      return res.data\n    }\n  }\n\n  public async createFile(fileName: string, data?: any) {\n    if (this.axiosInstance) {\n      const res = await this.axiosInstance(`files`, {\n        method: 'POST', data: {\n          ...data,\n          name: fileName\n        }\n      })\n      return res.data\n    }\n  }\n\n  public async createFolder(folderName: string, data?: any) {\n    return this.createFile(folderName, { ...data, 'mimeType': 'application/vnd.google-apps.folder' })\n  }\n\n  public async getFileByName(fileName: string) {\n    const files = (await this.listFiles()).files\n    return _.find(files, { 'name': fileName })\n  }\n\n  public async createInitialFiles() {\n    const dataFolderExists = await this.getFileByName('PasswordManagerData')\n    if (dataFolderExists === undefined) {\n      this.createFolder('PasswordManagerData', { 'folderColorRgb': 'Red' }).then((data) => {\n        Promise.all([\n          this.createFile('DO NOT EDIT ANYTHING IN THIS FOLDER', { 'parents': [data.id] }),\n          this.createFolder('Data', { 'parents': [data.id] }),\n          this.createFile('Settings.enc', { 'parents': [data.id] }),\n        ])\n      })\n    }\n  }\n}\n\nexport default GoogleDriveAPI\n","import React from 'react'\nimport _ from 'lodash'\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline, GoogleLogout, useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { useDispatch } from 'react-redux'\nimport AuthActions from '../../Redux/User/Auth/AuthActions'\nimport SnackbarActions from '../../Redux/UI/Snackbar/SnackbarActions'\nimport { SnackbarAlertStatus } from '../../Redux/UI/Snackbar/SnackbarConstants'\nimport GoogleDriveAPI from '../../DataHandler/CloudStorage/GoogleDriveAPI'\n\nconst scopes = [\n  'https://www.googleapis.com/auth/drive.file',\n  'https://www.googleapis.com/auth/drive.appdata'\n]\n\nconst GoogleLoginProps = {\n  clientId: _.get(process.env, 'REACT_APP_GOOGLE_CLIENT_ID', ''),\n  cookiePolicy: 'single_host_origin',\n  scope: scopes.join(' '),\n  isSignedIn: true\n}\n\nconst onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline, dispatch: (arg0: any) => void) => {\n  dispatch(AuthActions.loginUsingGoogle(response))\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.success, 'Google Login Successful'))\n  GoogleDriveAPI.getInstance().createInitialFiles()\n}\n\nconst onFailure = (response: GoogleLoginResponse, dispatch: (arg0: any) => void) => {\n  console.error(response)\n  dispatch(SnackbarActions.viewSnackbarAlert(SnackbarAlertStatus.error, 'Google Login Failed'))\n}\n\nexport const LoginWithGoogle = () => {\n  const dispatch = useDispatch()\n  return (\n    <div>\n      <GoogleLogin\n        {...GoogleLoginProps}\n        onSuccess={(response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch))}\n        onFailure={(response: GoogleLoginResponse) => (onFailure(response, dispatch))}\n      />\n    </div>\n  )\n}\n\nexport const useLogin = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch)),\n    onFailure: (response: GoogleLoginResponse) => (onFailure(response, dispatch))\n  }\n  return useGoogleLogin(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const useLogout = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onLogoutSuccess: () => dispatch(AuthActions.logout()),\n  }\n  return useGoogleLogout(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const Logout = () => {\n  const dispatch = useDispatch()\n  const onSuccess = () => {\n    dispatch(AuthActions.logout())\n  }\n  return (\n    <div>\n      <GoogleLogout {...GoogleLoginProps} onLogoutSuccess={onSuccess} buttonText=\"Logout\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress'\nimport { RootState } from '../../Redux/store'\nimport { useSelector } from 'react-redux'\n\nexport const LinearProgressBar = () => {\n  const state = useSelector((state: RootState) => state.UI.ProgressBar)\n  const props: LinearProgressProps = { value: state.progress, variant: 'determinate' }\n\n  if (state.indeterminate) {\n    props.variant = \"indeterminate\"\n    props.value = 0\n  }\n\n  if ((props.value !== 0 && props.variant === 'determinate') || state.indeterminate) {\n    return (<LinearProgress {...props} />)\n  }\n  return (<></>)\n}","import React from 'react'\nimport { styled, alpha } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\n// import GoogleIcon from '@mui/icons-material/Google'\n// import LogoutIcon from '@mui/icons-material/Logout'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport Avatar from '@mui/material/Avatar'\nimport { LoginWithGoogle, Logout } from '../LoginWithGoogle/LoginWithGoogle'\nimport { LinearProgressBar } from '../LinearProgressBar/LinearProgressBar'\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto',\n  },\n}))\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}))\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))\n\nexport const MainAppBar = () => {\n  const state = useSelector((state: RootState) => state.User.Auth.GoogleToken)\n\n  let userData = <>\n    <LoginWithGoogle />\n  </>\n\n  if (state) {\n    userData = <>\n      <Logout />\n      <IconButton size=\"large\" edge=\"end\" color=\"inherit\">\n        <Avatar alt={state.profileObj.name} src={state.profileObj.imageUrl} sx={{ width: 24, height: 24 }} />\n      </IconButton>\n    </>\n  }\n\n  return (\n    <Box>\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Password Manager\n          </Typography>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase placeholder=\"Search…\" inputProps={{ 'aria-label': 'search' }} />\n          </Search>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n            {userData}\n          </Box>\n        </Toolbar>\n        <LinearProgressBar />\n      </AppBar>\n    </Box>\n  )\n}","import { Action, ActionCreator } from 'redux'\nimport GlobalConstants from './GlobalConstants'\n\nconst endAppLoading: ActionCreator<Action> = () => ({ type: GlobalConstants.END_APP_LOADING })\nconst openNewCategoryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_CATEGORY_DIALOG })\nconst openNewEntryDialog: ActionCreator<Action> = () => ({ type: GlobalConstants.OPEN_NEW_ENTRY_DIALOG })\nconst closeAllDialogs: ActionCreator<Action> = () => ({ type: GlobalConstants.CLOSE_DIALOG })\n\nconst GlobalActions = {\n  endAppLoading,\n  openNewCategoryDialog,\n  openNewEntryDialog,\n  closeAllDialogs\n}\n\nexport default GlobalActions\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport GlobalActions from '../../Redux/UI/Global/GlobalActions'\nimport SpeedDial from '@mui/material/SpeedDial'\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon'\nimport SpeedDialAction from '@mui/material/SpeedDialAction'\nimport ShortTextIcon from '@mui/icons-material/ShortText'\nimport FolderIcon from '@mui/icons-material/Folder'\n\nexport const AddFab = () => {\n  const [open, setOpen] = React.useState(false)\n  const dispatch = useDispatch()\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleNewEntry = () => {\n    dispatch(GlobalActions.openNewEntryDialog())\n    handleClose()\n  }\n\n  const handleNewCategory = () => {\n    dispatch(GlobalActions.openNewCategoryDialog())\n    handleClose()\n  }\n\n  const actions = [\n    { icon: <ShortTextIcon />, name: 'New Entry', onClick: handleNewEntry },\n    { icon: <FolderIcon />, name: 'New Category', onClick: handleNewCategory }\n  ]\n\n  return (\n    <SpeedDial\n      ariaLabel=\"Create ...\"\n      sx={{ position: 'absolute', bottom: 36, right: 36 }}\n      icon={<SpeedDialIcon />}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      open={open}\n    >\n      {actions.map((action) => (\n        <SpeedDialAction\n          key={action.name}\n          icon={action.icon}\n          tooltipTitle={action.name}\n          onClick={action.onClick}\n        />\n      ))}\n    </SpeedDial>\n  )\n}","import React from 'react'\nimport Drawer from '@mui/material/Drawer'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemIcon from '@mui/material/ListItemIcon'\nimport ListItemText from '@mui/material/ListItemText'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport FolderOpenIcon from '@mui/icons-material/FolderOpen'\nimport Toolbar from '@mui/material/Toolbar'\nimport Box from '@mui/material/Box'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport DataActions from '../../Redux/Data/DataActions'\n\nconst drawerWidth: number = 200\n\nexport const NavDrawer = () => {\n  const dispatch = useDispatch()\n  const categories = useSelector((state: RootState) => (state.Data.Data))\n  const selectedCat = useSelector((state: RootState) => (state.Data.SelectedCategory))\n\n  const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    dispatch(DataActions.CategoryActions.changeSelectedCategory(newKey))\n  }\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      sx={{\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n      }}\n    >\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          {\n            Object.keys(categories).map((category_name: string) => {\n              return (\n                <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)}>\n                  <ListItemIcon>\n                    {(selectedCat === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                  </ListItemIcon>\n                  <ListItemText primary={category_name} />\n                </ListItem>\n              )\n            })\n          }\n        </List>\n        <Divider />\n      </Box>\n    </Drawer>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Data/DataActions'\n\nexport interface CreateCategoryProps {\n  isOpen: boolean\n}\n\ninterface CreateCategoryState {\n  category: string\n}\n\nconst initialState: CreateCategoryState = { category: '' }\n\nexport const CreateCategory = (props: CreateCategoryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateCategoryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.category) {\n      dispatch(DataActions.CategoryActions.createNewCategory(values.category))\n    }\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Category\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new category\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"category\">Category</InputLabel>\n            <Input\n              id=\"category\"\n              type='text'\n              value={values.category}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IconButton from '@mui/material/IconButton'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport { checkPasswordStrength, generatePassword } from '../../../Security/PasswordGenerator'\nimport Box from '@mui/material/Box'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Typography from '@mui/material/Typography'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport DataActions from '../../../Redux/Data/DataActions'\nimport { RootState } from '../../../Redux/store'\n\nexport interface CreateEntryProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  username: string\n  password: string\n  url: string\n  passwordStrength: { lowercase: boolean, uppercase: boolean, number: boolean, symbol: boolean, value: string }\n}\n\nconst initialState = {\n  username: '',\n  password: '',\n  url: '',\n  passwordStrength: {\n    lowercase: false,\n    uppercase: false,\n    number: false,\n    symbol: false,\n    value: ''\n  }\n}\n\nexport const CreateEntry = (props: CreateEntryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n  const currentCategory = useSelector((state: RootState) => state.Data.SelectedCategory)\n  const pwGenerationSettings = useSelector((state: RootState) => state.User.Settings.passwordGen)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n\n    if (changeEvent.target.id === 'password') {\n      checkPassword(changeEvent.target.value)\n    }\n  }\n\n  const checkPassword = (password: string) => {\n    const pwStrength = checkPasswordStrength(password)\n    const pwst = { ...initialState.passwordStrength }\n\n    pwStrength.contains.forEach((value) => {\n      pwst[value] = true\n    })\n\n    pwst.value = pwStrength.value\n    setValues((state) => ({\n      ...state,\n      passwordStrength: pwst\n    }))\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(GlobalActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.username) {\n      dispatch(DataActions.EntryActions.createNewEntry(currentCategory, values.username, values.password, values.url))\n    }\n    handleClose()\n  }\n\n  const generatePasswd = () => {\n    const generatedPW = generatePassword(pwGenerationSettings)\n    setValues((prevState: CreateEntryState) => ({\n      ...prevState,\n      password: generatedPW\n    }))\n    checkPassword(generatedPW)\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Entry\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new entry\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"username\">Username</InputLabel>\n            <Input\n              id=\"username\"\n              type='text'\n              value={values.username}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Typography align='right' minWidth={'5ch'}>{values.password.length}</Typography>\n                  <IconButton\n                    aria-label=\"generate a new password\"\n                    onClick={generatePasswd}\n                  >\n                    <AutorenewIcon />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <Box>\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.lowercase} />} label=\"Lowercase\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.uppercase} />} label=\"Uppercase\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.number} />} label=\"Number\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.symbol} />} label=\"Symbol\" />\n          </Box>\n          <Box>\n            <Typography>\n              {values.passwordStrength.value + ' '}\n            </Typography>\n          </Box>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"url\">URL</InputLabel>\n            <Input\n              id=\"url\"\n              type='text'\n              value={values.url}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import generator from 'generate-password'\nimport { passwordStrength, Options } from 'check-password-strength'\n\nexport interface PasswordGeneratorProps {\n  length?: number\n  numbers?: boolean\n  symbols?: boolean | string\n  lowercase?: boolean\n  uppercase?: boolean\n  excludeSimilarCharacters?: boolean\n  exclude?: string\n}\n\nexport const generatePassword = (props?: PasswordGeneratorProps) => {\n  return generator.generate({\n    ...props,\n    strict: true\n  })\n}\n\nexport const checkPasswordStrength = (password: string) => {\n  const strengthOptions: Options<string> = [\n    {\n      id: 0,\n      value: \"Too weak\",\n      minDiversity: 0,\n      minLength: 0\n    },\n    {\n      id: 1,\n      value: \"Weak\",\n      minDiversity: 2,\n      minLength: 6\n    },\n    {\n      id: 2,\n      value: \"Medium\",\n      minDiversity: 3,\n      minLength: 12\n    },\n    {\n      id: 3,\n      value: \"Strong\",\n      minDiversity: 4,\n      minLength: 16\n    },\n    {\n      id: 4,\n      value: \"Very Strong\",\n      minDiversity: 4,\n      minLength: 32\n    },\n    {\n      id: 5,\n      value: \"Very Strong\",\n      minDiversity: 3,\n      minLength: 36\n    }\n  ]\n\n  return passwordStrength(password, strengthOptions)\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport GlobalActions from '../../../Redux/UI/Global/GlobalActions'\nimport UserActions from '../../../Redux/User/Auth/AuthActions'\n\nexport interface MasterPasswordProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  password: string\n}\n\nconst initialState = {\n  password: ''\n}\n\nexport const MasterPassword = (props: MasterPasswordProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if (checkPassword(changeEvent.target.value)) {\n      setValues({\n        ...values,\n        [changeEvent.target.id]: changeEvent.target.value\n      })\n    }\n  }\n\n  const checkPassword = (password: string): boolean => {\n    return false\n  }\n\n  const handleClose = () => {\n    if (values) {\n      dispatch(UserActions.setMasterPassword(values.password))\n      setValues(() => initialState)\n      dispatch(GlobalActions.closeAllDialogs())\n    }\n  }\n\n  const handleCreateAndClose = () => {\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Enter Your Master Password\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter your master password\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Check\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport { CreateCategory } from './CreateCategory/CreateCategory'\nimport { CreateEntry } from './CreateEntry/CreateEntry'\nimport { MasterPassword } from './MasterPassword/MasterPassword'\n\nexport const Dialogs = () => {\n  const state = useSelector((state: RootState) => state.UI.Global)\n\n  return (\n    <>\n      <CreateCategory isOpen={state.NewCategory} />\n      <CreateEntry isOpen={state.NewEntry} />\n      <MasterPassword isOpen={state.MasterPassword} />\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions())\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowDimensions\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/store'\nimport { DataGrid, GridRowsProp, GridColDef } from '@mui/x-data-grid'\nimport { Category } from '../../Redux/Data/DataReducer'\nimport useWindowDimensions from '../../Hooks/useWindowDimensions'\n\nexport const EntryTable = () => {\n  const selectedCategoryName = useSelector((state: RootState) => state.Data.SelectedCategory)\n  const selectedCategory: Category = useSelector((state: RootState) => state.Data.Data[selectedCategoryName])\n  const { height } = useWindowDimensions()\n\n  let rows: GridRowsProp = Object.values(selectedCategory.entries)\n\n  const columns: GridColDef[] = [\n    { field: 'user', headerName: 'Username', width: 500 },\n    { field: 'pass', headerName: 'Password', width: 500 },\n    { field: 'url', headerName: 'URL', width: 500 }\n  ]\n\n  const logger = {\n    debug: (str: string) => { console.log(str) },\n    info: (str: string) => { console.log(str) },\n    warn: (str: string) => { console.log(str) },\n    error: (str: string) => { console.log(str) }\n  }\n\n  const copyCellData = async (cell: any) => {\n    console.log('Single Click')\n    if (navigator.clipboard) {\n      await navigator.clipboard.writeText(cell.value)\n    }\n  }\n\n  const editCellData = () => {\n    console.log('Double Click')\n  }\n\n  return (\n    <div style={{ height: (height - (height / 3)), width: '100%' }}>\n      <div style={{ display: 'flex', height: '100%' }}>\n        <div style={{ flexGrow: 1 }}>\n          <DataGrid rows={rows} columns={columns} logger={logger} onCellClick={copyCellData} onCellDoubleClick={editCellData} />\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport Box from '@mui/material/Box'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Toolbar from '@mui/material/Toolbar'\nimport { MainAppBar } from '../MainAppBar/MainAppBar'\nimport { AddFab } from '../AddFab/AddFab'\nimport { NavDrawer } from '../NavDrawer/NavDrawer'\nimport { Dialogs } from '../Dialogs/Dialogs'\nimport { EntryTable } from '../EntryTable/EntryTable'\n\nexport const Navigator = () => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Dialogs />\n      <CssBaseline />\n      <MainAppBar />\n      <NavDrawer />\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <Toolbar />\n        <EntryTable />\n        <AddFab />\n      </Box>\n    </Box>\n  )\n}","import React from 'react'\nimport Slide from '@mui/material/Slide'\nimport Snackbar from '@mui/material/Snackbar'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\nimport { RootState } from '../../Redux/store'\nimport { useSelector } from 'react-redux'\nimport { SnackbarAlertStatus } from '../../Redux/UI/Snackbar/SnackbarConstants'\n\nexport interface AlertSnackbarProps {\n  message: string\n  status: SnackbarAlertStatus\n  delay?: number\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n})\n\nAlert.displayName = 'Alert'\n\nexport const AlertSnackbar = (props: AlertSnackbarProps) => {\n  const [open, setOpen] = React.useState(true)\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const action = (\n    <React.Fragment>\n      <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  )\n\n  return (\n    <Snackbar\n      open={open}\n      TransitionComponent={Slide}\n      autoHideDuration={props.delay || 3000}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      onClose={handleClose}\n      action={action}\n    >\n      <Alert onClose={handleClose} severity={props.status} sx={{ width: '100%' }}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  )\n}\n\nexport const GlobalAlertSnackbar = () => {\n  const state = useSelector((state: RootState) => state.UI.Snackbar)\n  if (state.message !== '') {\n    return <AlertSnackbar message={state.message} status={state.status} />\n  }\n  return <></>\n}\n","import React from 'react'\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport const ProgressCircle = () => {\n  return <CircularProgress />\n}","import React from 'react'\nimport { Navigator } from './Navigator/Navigator'\nimport { GlobalAlertSnackbar } from './AlertSnackbar/AlertSnackbar'\nimport { ProgressCircle } from './ProgressCircle/ProgressCircle'\nimport { useTimeout } from 'usehooks-ts'\nimport { useDispatch, useSelector } from 'react-redux'\nimport GlobalActions from '../Redux/UI/Global/GlobalActions'\nimport { RootState } from '../Redux/store'\nimport { useLogin } from './LoginWithGoogle/LoginWithGoogle'\n\nconst AppLoadingContent = () => {\n  return (\n    <>\n      <ProgressCircle />\n    </>\n  )\n}\n\nconst MainAppContent = () => {\n  return (\n    <>\n      <Navigator />\n    </>\n  )\n}\n\nconst App = () => {\n  const dispatch = useDispatch()\n  useLogin()\n  useTimeout(() => {\n    dispatch(GlobalActions.endAppLoading())\n  }, 3000)\n\n  const loadingState = useSelector((state: RootState) => state.UI.Global.AppLoading)\n\n  let content = <AppLoadingContent />\n  if (!loadingState) {\n    content = <MainAppContent />\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalAlertSnackbar />\n      {content}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './Components/App'\nimport reportWebVitals from './reportWebVitals'\nimport store from './Redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}