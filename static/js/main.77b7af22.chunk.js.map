{"version":3,"sources":["Redux/Constants/UIConstants.ts","Redux/Actions/UIActions.ts","Redux/Constants/UserConstants.ts","Redux/Actions/UserActions.ts","Components/LoginWithGoogle/LoginWithGoogle.tsx","Components/LinearProgressBar/LinearProgressBar.tsx","Components/MainAppBar/MainAppBar.tsx","Components/AddFab/AddFab.tsx","Redux/Constants/DataConstants.ts","Redux/Actions/DataActions.ts","Components/NavDrawer/NavDrawer.tsx","Components/Dialogs/CreateCategory/CreateCategory.tsx","Components/Dialogs/CreateEntry/CreateEntry.tsx","Security/PasswordGenerator.ts","Components/Dialogs/Dialogs.tsx","Hooks/useWindowDimensions.ts","Components/EntryTable/EntryTable.tsx","Components/Navigator/Navigator.tsx","Components/AlertSnackbar/AlertSnackbar.tsx","Components/ProgressCircle/ProgressCircle.tsx","Components/App.tsx","reportWebVitals.ts","Redux/Reducers/UserReducer.ts","Redux/Reducers/UIReducer.ts","Redux/Reducers/DataReducer.ts","Redux/Reducers/index.ts","Redux/store.ts","index.tsx"],"names":["AlertStatus","UIConstants","UIActions","status","message","type","UserConstants","UserActions","data","google_token","GoogleLoginProps","clientId","cookiePolicy","redirectUri","scope","isSignedIn","onSuccess","response","dispatch","success","onFailure","console","error","LoginWithGoogle","useDispatch","Logout","onLogoutSuccess","buttonText","LinearProgressBar","state","useSelector","UI","ProgressBar","props","value","progress","variant","indeterminate","LinearProgress","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","color","paddingLeft","transition","transitions","create","MainAppBar","User","userData","IconButton","size","edge","Avatar","alt","profileObj","name","src","imageUrl","sx","Box","AppBar","zIndex","drawer","Toolbar","Typography","noWrap","component","placeholder","inputProps","flexGrow","xs","md","AddFab","React","useState","open","setOpen","handleClose","actions","icon","onClick","SpeedDial","ariaLabel","bottom","right","SpeedDialIcon","onClose","onOpen","map","action","SpeedDialAction","tooltipTitle","DataConstants","CREATE_ENTRY","DELETE_ENTRY","CREATE_CATEGORY","DELETE_CATEGORY","CHANGE_SELECTED_CATEGORY","DataActions","createNewEntry","category_name","entry_user","entry_pass","deleteEntry","entry_id","createNewCategory","deleteCategory","changeSelectedCategory","NavDrawer","categories","Data","selectedCat","SelectedCategory","Drawer","flexShrink","boxSizing","overflow","List","Object","keys","ListItem","button","event","newKey","ListItemIcon","ListItemText","primary","Divider","initialState","category","CreateCategory","useTheme","fullScreen","useMediaQuery","down","values","setValues","Dialog","isOpen","DialogTitle","id","DialogContent","DialogContentText","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","changeEvent","target","DialogActions","Button","autoFocus","username","password","passwordStrength","lowercase","uppercase","number","symbol","CreateEntry","currentCategory","handleChange","checkPassword","pwStrength","minDiversity","minLength","checkPasswordStrength","pwst","contains","forEach","endAdornment","InputAdornment","align","minWidth","length","generatedPW","generator","generate","strict","generatePassword","prevState","FormControlLabel","disabled","control","Checkbox","checked","label","Dialogs","NewCategory","NewEntry","getWindowDimensions","window","innerWidth","innerHeight","EntryTable","selectedCategoryName","selectedCategory","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","log","rows","_","get","logger","debug","str","info","warn","copyCellData","cell","a","navigator","clipboard","writeText","style","columns","field","headerName","onCellClick","onCellDoubleClick","Navigator","CssBaseline","p","Alert","forwardRef","ref","elevation","displayName","AlertSnackbar","reason","Fragment","fontSize","Snackbar","TransitionComponent","Slide","autoHideDuration","delay","anchorOrigin","vertical","horizontal","severity","GlobalAlertSnackbar","ProgressCircle","CircularProgress","AppLoadingContent","MainAppContent","App","events","useGoogleLogin","assign","useLogin","useTimeout","loadingState","AppLoading","content","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","master_password","defaultCategory","entries","rootReducer","combineReducers","user","pass","Math","random","toString","substr","newEntry","SelectedCategoryData","newEntries","push","loggerMiddleware","createLogger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77b7af22.chunk.js","sourcesContent":["export enum AlertStatus {\n  success = 'success',\n  info = 'info',\n  warning = 'warning',\n  error = 'error'\n}\n\nexport const UIConstants = {\n  END_APP_LOADING: 'END_APP_LOADING',\n  ADD_ALERT: 'ADD_ALERT',\n  OPEN_NEW_ENTRY_DIALOG: 'OPEN_NEW_ENTRY_DIALOG',\n  OPEN_NEW_CATEGORY_DIALOG: 'OPEN_NEW_CATEGORY_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n  SET_PROGRESS_VALUE: 'SET_PROGRESS_VALUE',\n  ENABLE_INDETERMINATE_PROGRESS_BAR: 'ENABLE_INDETERMINATE_PROGRESS_BAR',\n  DISABLE_INDETERMINATE_PROGRESS_BAR: 'DISABLE_INDETERMINATE_PROGRESS_BAR'\n}\n","import { Action, ActionCreator } from 'redux'\nimport { AlertStatus, UIConstants } from '../Constants/UIConstants'\n\nexport interface AlertAction extends Action {\n  message: string\n  status: AlertStatus\n}\n\nexport interface ProgressBarAction extends Action {\n  progress: number\n  indeterminate: boolean\n}\n\nexport type UIAction = AlertAction | ProgressBarAction\n\nconst endAppLoading: ActionCreator<Action> = () => ({ type: UIConstants.END_APP_LOADING })\n\nconst addAlert: ActionCreator<AlertAction> = (status: AlertStatus, message: string) => ({\n  type: UIConstants.ADD_ALERT,\n  status,\n  message\n})\n\nconst openNewCategoryDialog: ActionCreator<Action> = () => ({ type: UIConstants.OPEN_NEW_CATEGORY_DIALOG })\nconst openNewEntryDialog: ActionCreator<Action> = () => ({ type: UIConstants.OPEN_NEW_ENTRY_DIALOG })\nconst closeAllDialogs: ActionCreator<Action> = () => ({ type: UIConstants.CLOSE_DIALOG })\n\nexport const UIActions = {\n  addAlert,\n  endAppLoading,\n  openNewCategoryDialog,\n  openNewEntryDialog,\n  closeAllDialogs\n}\n","export const UserConstants = {\n  GOOGLE_LOGIN_SUCCESS: 'GOOGLE_LOGIN_SUCCESS',\n  GOOGLE_LOGIN_ERROR: 'GOOGLE_LOGIN_ERROR',\n  MASTER_PASSWORD_SUCCESS: 'MASTER_PASSWORD_SUCCESS',\n  MASTER_PASSWORD_ERROR: 'MASTER_PASSWORD_ERROR',\n  CLEAR_MASTER_PASSWORD: 'CLEAR_MASTER_PASSWORD',\n  CLEAR: 'LOGOUT'\n}\n","import { Action, ActionCreator } from 'redux'\nimport { UserConstants } from '../Constants/UserConstants'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface UserAction extends Action {\n  google_token?: GoogleLoginResponse\n  master_password?: string\n}\n\nconst google_login: ActionCreator<UserAction> = (data: GoogleLoginResponse) => {\n  return { type: UserConstants.GOOGLE_LOGIN_SUCCESS, google_token: data }\n}\n\nconst check_master_password: ActionCreator<UserAction> = () => {\n  // decrypt the settings file\n  return { type: UserConstants.MASTER_PASSWORD_SUCCESS, master_password: 'SOME MASTER PASSWORD' }\n}\n\nconst clear_master_password: ActionCreator<Action> = () => {\n  return { type: UserConstants.CLEAR_MASTER_PASSWORD }\n}\n\nconst clear: ActionCreator<Action> = () => {\n  return { type: UserConstants.CLEAR }\n}\n\nexport const UserActions = {\n  google_login,\n  check_master_password,\n  clear_master_password,\n  clear\n}\n","import React from 'react'\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline, GoogleLogout, useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { useDispatch } from 'react-redux'\nimport { UIActions } from '../../Redux/Actions/UIActions'\nimport { UserActions } from '../../Redux/Actions/UserActions'\nimport { AlertStatus } from '../../Redux/Constants/UIConstants'\n\nconst GoogleLoginProps = {\n  clientId: '952024862678-rka3ij8bqmpr6qps23n72a7b72mjpkep.apps.googleusercontent.com',\n  cookiePolicy: 'single_host_origin',\n  redirectUri: 'https://mrbmikhael.github.io/passwordmanager_web/',\n  scope: 'https://www.googleapis.com/auth/drive.appdata',\n  isSignedIn: true\n}\n\nconst onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline, dispatch: (arg0: any) => void) => {\n  dispatch(UserActions.google_login(response))\n  dispatch(UIActions.addAlert(AlertStatus.success, 'Google Login Successful'))\n}\n\nconst onFailure = (response: GoogleLoginResponse, dispatch: (arg0: any) => void) => {\n  console.error(response)\n  dispatch(UIActions.addAlert(AlertStatus.error, 'Google Login Failed'))\n}\n\nexport const LoginWithGoogle = () => {\n  const dispatch = useDispatch()\n  return (\n    <div>\n      <GoogleLogin\n        {...GoogleLoginProps}\n        onSuccess={(response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch))}\n        onFailure={(response: GoogleLoginResponse) => (onFailure(response, dispatch))}\n      />\n    </div>\n  )\n}\n\nexport const useLogin = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onSuccess: (response: GoogleLoginResponse | GoogleLoginResponseOffline) => (onSuccess(response, dispatch)),\n    onFailure: (response: GoogleLoginResponse) => (onFailure(response, dispatch))\n  }\n  return useGoogleLogin(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const useLogout = () => {\n  const dispatch = useDispatch()\n  const events = {\n    onLogoutSuccess: () => dispatch(UserActions.clear()),\n  }\n  return useGoogleLogout(Object.assign({}, GoogleLoginProps, events))\n}\n\nexport const Logout = () => {\n  const dispatch = useDispatch()\n  const onSuccess = () => {\n    dispatch(UserActions.clear())\n  }\n  return (\n    <div>\n      <GoogleLogout {...GoogleLoginProps} onLogoutSuccess={onSuccess} buttonText=\"Logout\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress'\nimport { RootState } from '../../Redux/Reducers'\nimport { useSelector } from 'react-redux'\n\nexport const LinearProgressBar = () => {\n  const state = useSelector((state: RootState) => state.UI.ProgressBar)\n  const props: LinearProgressProps = { value: state.progress, variant: 'determinate' }\n\n  if (state.indeterminate) {\n    props.variant = \"indeterminate\"\n    props.value = 0\n  }\n\n  if ((props.value !== 0 && props.variant === 'determinate') || state.indeterminate) {\n    return (<LinearProgress {...props} />)\n  }\n  return (<></>)\n}","import React from 'react'\nimport { styled, alpha } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\n// import GoogleIcon from '@mui/icons-material/Google'\n// import LogoutIcon from '@mui/icons-material/Logout'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/Reducers'\nimport Avatar from '@mui/material/Avatar'\nimport { LoginWithGoogle, Logout } from '../LoginWithGoogle/LoginWithGoogle'\nimport { LinearProgressBar } from '../LinearProgressBar/LinearProgressBar'\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto',\n  },\n}))\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}))\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))\n\nexport const MainAppBar = () => {\n  const state = useSelector((state: RootState) => state.User.google_token)\n\n  let userData = <>\n    <LoginWithGoogle />\n  </>\n\n  if (state) {\n    userData = <>\n      <Logout />\n      <IconButton size=\"large\" edge=\"end\" color=\"inherit\">\n        <Avatar alt={state.profileObj.name} src={state.profileObj.imageUrl} sx={{ width: 24, height: 24 }} />\n      </IconButton>\n    </>\n  }\n\n  return (\n    <Box>\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Password Manager\n          </Typography>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase placeholder=\"Search…\" inputProps={{ 'aria-label': 'search' }} />\n          </Search>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n            {userData}\n          </Box>\n        </Toolbar>\n        <LinearProgressBar />\n      </AppBar>\n    </Box>\n  )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { UIActions } from '../../Redux/Actions/UIActions'\nimport SpeedDial from '@mui/material/SpeedDial'\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon'\nimport SpeedDialAction from '@mui/material/SpeedDialAction'\nimport ShortTextIcon from '@mui/icons-material/ShortText'\nimport FolderIcon from '@mui/icons-material/Folder'\n\nexport const AddFab = () => {\n  const [open, setOpen] = React.useState(false)\n  const dispatch = useDispatch()\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleNewEntry = () => {\n    dispatch(UIActions.openNewEntryDialog())\n    handleClose()\n  }\n\n  const handleNewCategory = () => {\n    dispatch(UIActions.openNewCategoryDialog())\n    handleClose()\n  }\n\n  const actions = [\n    { icon: <ShortTextIcon />, name: 'New Entry', onClick: handleNewEntry },\n    { icon: <FolderIcon />, name: 'New Category', onClick: handleNewCategory }\n  ]\n\n  return (\n    <SpeedDial\n      ariaLabel=\"Create ...\"\n      sx={{ position: 'absolute', bottom: 36, right: 36 }}\n      icon={<SpeedDialIcon />}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      open={open}\n    >\n      {actions.map((action) => (\n        <SpeedDialAction\n          key={action.name}\n          icon={action.icon}\n          tooltipTitle={action.name}\n          onClick={action.onClick}\n        />\n      ))}\n    </SpeedDial>\n  )\n}","\nconst EntryConstants = {\n  CREATE_ENTRY: 'CREATE_ENTRY',\n  DELETE_ENTRY: 'DELETE_ENTRY'\n}\n\nconst CategoryConstants = {\n  CREATE_CATEGORY: 'CREATE_CATEGORY',\n  DELETE_CATEGORY: 'DELETE_CATEGORY',\n  CHANGE_SELECTED_CATEGORY: 'CHANGE_SELECTED_CATEGORY'\n}\n\nexport const DataConstants = { EntryConstants, CategoryConstants }","import { Action, ActionCreator } from 'redux'\nimport { DataConstants } from '../Constants/DataConstants'\n\nexport interface DataAction extends Action {\n  category_name: string\n  new_category_name?: string\n  entry_user?: string\n  entry_pass?: string\n  entry_id?: string\n}\n\nconst createNewCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CREATE_CATEGORY, category_name\n})\nconst deleteCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.DELETE_CATEGORY, category_name\n})\nconst changeSelectedCategory: ActionCreator<DataAction> = (category_name: string) => ({\n  type: DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY, category_name\n})\n\nconst createNewEntry: ActionCreator<DataAction> = (category_name: string, entry_user: string, entry_pass: string) => ({\n  type: DataConstants.EntryConstants.CREATE_ENTRY, category_name, entry_user, entry_pass\n})\nconst deleteEntry: ActionCreator<DataAction> = (category_name: string, entry_id: string) => ({\n  type: DataConstants.EntryConstants.DELETE_ENTRY, category_name, entry_id\n})\n\nconst CategoryActions = { createNewCategory, deleteCategory, changeSelectedCategory }\nconst EntryActions = { createNewEntry, deleteEntry }\n\nexport const DataActions = { EntryActions, CategoryActions }\n","import React from 'react'\nimport Drawer from '@mui/material/Drawer'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemIcon from '@mui/material/ListItemIcon'\nimport ListItemText from '@mui/material/ListItemText'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport FolderOpenIcon from '@mui/icons-material/FolderOpen'\nimport Toolbar from '@mui/material/Toolbar'\nimport Box from '@mui/material/Box'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/Reducers'\nimport { DataActions } from '../../Redux/Actions/DataActions'\n\nconst drawerWidth: number = 200\n\nexport const NavDrawer = () => {\n  const dispatch = useDispatch()\n  const categories = useSelector((state: RootState) => (state.Data.Data))\n  const selectedCat = useSelector((state: RootState) => (state.Data.SelectedCategory))\n\n  const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, newKey: string) => {\n    dispatch(DataActions.CategoryActions.changeSelectedCategory(newKey))\n  }\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      sx={{\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n      }}\n    >\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          {\n            Object.keys(categories).map((category_name: string) => {\n              return (\n                <ListItem button key={category_name} onClick={(event) => handleListItemClick(event, category_name)}>\n                  <ListItemIcon>\n                    {(selectedCat === category_name) ? <FolderOpenIcon /> : <FolderIcon />}\n                  </ListItemIcon>\n                  <ListItemText primary={category_name} />\n                </ListItem>\n              )\n            })\n          }\n        </List>\n        <Divider />\n      </Box>\n    </Drawer>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch } from 'react-redux'\nimport { UIActions } from '../../../Redux/Actions/UIActions'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport { DataActions } from '../../../Redux/Actions/DataActions'\n\nexport interface CreateCategoryProps {\n  isOpen: boolean\n}\n\ninterface CreateCategoryState {\n  category: string\n}\n\nconst initialState: CreateCategoryState = { category: '' }\n\nexport const CreateCategory = (props: CreateCategoryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateCategoryState>(initialState)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(UIActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.category) {\n      dispatch(DataActions.CategoryActions.createNewCategory(values.category))\n    }\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Entry\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new category\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"category\">Category</InputLabel>\n            <Input\n              id=\"category\"\n              type='text'\n              value={values.category}\n              onChange={handleChange}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UIActions } from '../../../Redux/Actions/UIActions'\nimport IconButton from '@mui/material/IconButton'\nimport AutorenewIcon from '@mui/icons-material/Autorenew'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport Input from '@mui/material/Input'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport { checkPasswordStrength, generatePassword } from '../../../Security/PasswordGenerator'\nimport Box from '@mui/material/Box'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Typography from '@mui/material/Typography'\nimport { DataActions } from '../../../Redux/Actions/DataActions'\nimport { RootState } from '../../../Redux/Reducers'\n\nexport interface CreateEntryProps {\n  isOpen: boolean\n}\n\ninterface CreateEntryState {\n  username: string\n  password: string\n  passwordStrength: { lowercase: boolean, uppercase: boolean, number: boolean, symbol: boolean, value: string }\n}\n\nconst initialState = { username: '', password: '', passwordStrength: { lowercase: false, uppercase: false, number: false, symbol: false, value: '' } }\n\nexport const CreateEntry = (props: CreateEntryProps) => {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const dispatch = useDispatch()\n  const [values, setValues] = useState<CreateEntryState>(initialState)\n  const currentCategory = useSelector((state: RootState) => state.Data.SelectedCategory)\n\n  const handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [changeEvent.target.id]: changeEvent.target.value\n    })\n\n    if (changeEvent.target.id === 'password') {\n      checkPassword(changeEvent.target.value)\n    }\n  }\n\n  const checkPassword = (password: string) => {\n    const pwStrength = checkPasswordStrength(password)\n    const pwst = { ...initialState.passwordStrength }\n\n    pwStrength.contains.forEach((value) => {\n      pwst[value] = true\n    })\n\n    pwst.value = pwStrength.value\n    setValues((state) => ({\n      ...state,\n      passwordStrength: pwst\n    }))\n  }\n\n  const handleClose = () => {\n    setValues(() => initialState)\n    dispatch(UIActions.closeAllDialogs())\n  }\n\n  const handleCreateAndClose = () => {\n    if (values.username) {\n      dispatch(DataActions.EntryActions.createNewEntry(currentCategory, values.username, values.password))\n    }\n    handleClose()\n  }\n\n  const generatePasswd = () => {\n    const generatedPW = generatePassword()\n    setValues((prevState: CreateEntryState) => ({\n      ...prevState,\n      password: generatedPW\n    }))\n    checkPassword(generatedPW)\n  }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Create A New Entry\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Create a new entry\n          </DialogContentText>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"username\">Username</InputLabel>\n            <Input\n              id=\"username\"\n              type='text'\n              value={values.username}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <Input\n              id=\"password\"\n              type='text'\n              value={values.password}\n              onChange={handleChange}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Typography align='right' minWidth={'5ch'}>{values.password.length}</Typography>\n                  <IconButton\n                    aria-label=\"generate a new password\"\n                    onClick={generatePasswd}\n                  >\n                    <AutorenewIcon />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <Box>\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.lowercase} />} label=\"Lowercase\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.uppercase} />} label=\"Uppercase\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.number} />} label=\"Number\" />\n            <FormControlLabel disabled control={<Checkbox checked={values.passwordStrength.symbol} />} label=\"Symbol\" />\n          </Box>\n          <Box>\n            <Typography>\n              {values.passwordStrength.value}\n            </Typography>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleCreateAndClose} autoFocus>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}","import generator from 'generate-password'\nimport { passwordStrength, Options } from 'check-password-strength'\n\nexport interface PasswordGeneratorProps {\n  length?: number\n  numbers?: boolean\n  symbols?: boolean | string\n  lowercase?: boolean\n  uppercase?: boolean\n  excludeSimilarCharacters?: boolean\n  exclude?: string\n}\n\nexport const generatePassword = (props?: PasswordGeneratorProps) => {\n  return generator.generate({\n    ...props,\n    strict: true\n  })\n}\n\nexport const checkPasswordStrength = (password: string) => {\n  const strengthOptions: Options<string> = [\n    {\n      id: 0,\n      value: \"Too weak\",\n      minDiversity: 0,\n      minLength: 0\n    },\n    {\n      id: 1,\n      value: \"Weak\",\n      minDiversity: 2,\n      minLength: 6\n    },\n    {\n      id: 2,\n      value: \"Medium\",\n      minDiversity: 3,\n      minLength: 12\n    },\n    {\n      id: 3,\n      value: \"Strong\",\n      minDiversity: 4,\n      minLength: 16\n    },\n    {\n      id: 4,\n      value: \"Very Strong\",\n      minDiversity: 4,\n      minLength: 32\n    },\n    {\n      id: 5,\n      value: \"Very Strong\",\n      minDiversity: 3,\n      minLength: 36\n    }\n  ]\n\n  return passwordStrength(password, strengthOptions)\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/Reducers'\nimport { CreateCategory } from './CreateCategory/CreateCategory'\nimport { CreateEntry } from './CreateEntry/CreateEntry'\n\nexport const Dialogs = () => {\n  const state = useSelector((state: RootState) => state.UI.Dialog)\n\n  return (\n    <>\n      <CreateCategory isOpen={state.NewCategory} />\n      <CreateEntry isOpen={state.NewEntry} />\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions())\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowDimensions\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../Redux/Reducers'\nimport { DataGrid, GridRowsProp, GridColDef } from '@mui/x-data-grid'\nimport { Category } from '../../Redux/Reducers/DataReducer'\nimport _ from 'lodash'\nimport useWindowDimensions from '../../Hooks/useWindowDimensions'\n\nexport const EntryTable = () => {\n  const selectedCategoryName = useSelector((state: RootState) => state.Data.SelectedCategory)\n  const selectedCategory: Category = useSelector((state: RootState) => state.Data.Data[selectedCategoryName])\n  const { height } = useWindowDimensions()\n\n  console.log(selectedCategory)\n\n  let rows: GridRowsProp = _.get(selectedCategory, 'entries', [])\n\n  const columns: GridColDef[] = [\n    { field: 'user', headerName: 'Username', width: 300 },\n    { field: 'pass', headerName: 'Password', width: 500 },\n    { field: 'note', headerName: 'Note', width: 500 }\n  ]\n\n  const logger = {\n    debug: (str: string) => { console.log(str) },\n    info: (str: string) => { console.log(str) },\n    warn: (str: string) => { console.log(str) },\n    error: (str: string) => { console.log(str) }\n  }\n\n  const copyCellData = async (cell: any) => {\n    console.log('Single Click')\n    if (navigator.clipboard) {\n      await navigator.clipboard.writeText(cell.value)\n    }\n  }\n\n  const editCellData = () => {\n    console.log('Double Click')\n  }\n\n  return (\n    <div style={{ height: (height - (height / 3)), width: '100%' }}>\n      <div style={{ display: 'flex', height: '100%' }}>\n        <div style={{ flexGrow: 1 }}>\n          <DataGrid rows={rows} columns={columns} logger={logger} onCellClick={copyCellData} onCellDoubleClick={editCellData} />\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport Box from '@mui/material/Box'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Toolbar from '@mui/material/Toolbar'\nimport { MainAppBar } from '../MainAppBar/MainAppBar'\nimport { AddFab } from '../AddFab/AddFab'\nimport { NavDrawer } from '../NavDrawer/NavDrawer'\nimport { Dialogs } from '../Dialogs/Dialogs'\nimport { EntryTable } from '../EntryTable/EntryTable'\n\nexport const Navigator = () => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Dialogs />\n      <CssBaseline />\n      <MainAppBar />\n      <NavDrawer />\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <Toolbar />\n        <EntryTable />\n        <AddFab />\n      </Box>\n    </Box>\n  )\n}","import React from 'react'\nimport Slide from '@mui/material/Slide'\nimport Snackbar from '@mui/material/Snackbar'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport MuiAlert, { AlertProps } from '@mui/material/Alert'\nimport { RootState } from '../../Redux/Reducers/index'\nimport { useSelector } from 'react-redux'\nimport { AlertStatus } from '../../Redux/Constants/UIConstants'\n\nexport interface AlertSnackbarProps {\n  message: string\n  status: AlertStatus\n  delay?: number\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n})\n\nAlert.displayName = 'Alert'\n\nexport const AlertSnackbar = (props: AlertSnackbarProps) => {\n  const [open, setOpen] = React.useState(true)\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const action = (\n    <React.Fragment>\n      <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  )\n\n  return (\n    <Snackbar\n      open={open}\n      TransitionComponent={Slide}\n      autoHideDuration={props.delay || 3000}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      onClose={handleClose}\n      action={action}\n    >\n      <Alert onClose={handleClose} severity={props.status} sx={{ width: '100%' }}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  )\n}\n\nexport const GlobalAlertSnackbar = () => {\n  const state = useSelector((state: RootState) => state.UI.Snackbar)\n  if (state.message !== '') {\n    return <AlertSnackbar message={state.message} status={state.status} />\n  }\n  return <></>\n}\n","import React from 'react'\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport const ProgressCircle = () => {\n  return <CircularProgress />\n}","import React from 'react'\nimport { Navigator } from './Navigator/Navigator'\nimport { GlobalAlertSnackbar } from './AlertSnackbar/AlertSnackbar'\nimport { ProgressCircle } from './ProgressCircle/ProgressCircle'\nimport { useTimeout } from 'usehooks-ts'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UIActions } from '../Redux/Actions/UIActions'\nimport { RootState } from '../Redux/Reducers'\nimport { useLogin } from './LoginWithGoogle/LoginWithGoogle'\n\nconst AppLoadingContent = () => {\n  return (\n    <>\n      <ProgressCircle />\n    </>\n  )\n}\n\nconst MainAppContent = () => {\n  return (\n    <>\n      <Navigator />\n    </>\n  )\n}\n\nconst App = () => {\n  const dispatch = useDispatch()\n  useLogin()\n  useTimeout(() => {\n    dispatch(UIActions.endAppLoading())\n  }, 3000)\n\n  const loadingState = useSelector((state: RootState) => state.UI.AppLoading)\n\n  let content = <AppLoadingContent />\n  if (!loadingState) {\n    content = <MainAppContent />\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalAlertSnackbar />\n      {content}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Reducer } from 'redux'\nimport { UserAction } from '../Actions/UserActions'\nimport { UserConstants } from '../Constants/UserConstants'\nimport { GoogleLoginResponse } from 'react-google-login'\n\nexport interface UserState {\n  google_token: GoogleLoginResponse | null\n  master_password: string\n}\n\nconst initialState = {\n  google_token: null,\n  master_password: ''\n}\n\nexport const UserReducer: Reducer<UserState, UserAction> = (state = initialState, action: UserAction) => {\n  switch (action.type) {\n    case UserConstants.GOOGLE_LOGIN_SUCCESS:\n      return {\n        ...state,\n        google_token: action.google_token || null\n      }\n    case UserConstants.GOOGLE_LOGIN_ERROR:\n      return {\n        ...state,\n        google_token: null\n      }\n    case UserConstants.MASTER_PASSWORD_SUCCESS:\n      return {\n        ...state,\n        master_password: action.master_password || 'No Password'\n      }\n    case UserConstants.MASTER_PASSWORD_ERROR:\n      return {\n        ...state,\n        master_password: ''\n      }\n    case UserConstants.CLEAR_MASTER_PASSWORD:\n      return {\n        ...state,\n        master_password: ''\n      }\n    case UserConstants.CLEAR:\n      return initialState\n    default:\n      return state\n  }\n}\n","import { Reducer } from 'redux'\nimport { UIAction } from '../Actions/UIActions'\nimport { AlertStatus, UIConstants } from '../Constants/UIConstants'\n\nexport interface UIState {\n  AppLoading: boolean\n  Dialog: { NewEntry: boolean, NewCategory: boolean }\n  Snackbar: { message: string, status: AlertStatus }\n  ProgressBar: { progress: number, indeterminate: boolean }\n}\n\nconst initialState = {\n  AppLoading: true,\n  Dialog: { NewEntry: false, NewCategory: false },\n  Snackbar: { message: '', status: AlertStatus.info },\n  ProgressBar: { progress: 0, indeterminate: false }\n}\n\nexport const UIReducer: Reducer<UIState, UIAction> = (state = initialState, action: UIAction) => {\n  if ('progress' in action) {\n    switch (action.type) {\n      case UIConstants.SET_PROGRESS_VALUE:\n        return {\n          ...state,\n          ProgressBar: {\n            progress: action.progress,\n            indeterminate: false\n          }\n        }\n      case UIConstants.ENABLE_INDETERMINATE_PROGRESS_BAR:\n        return {\n          ...state,\n          ProgressBar: {\n            progress: 0,\n            indeterminate: true\n          }\n        }\n      case UIConstants.DISABLE_INDETERMINATE_PROGRESS_BAR:\n        return {\n          ...state,\n          ProgressBar: {\n            progress: 0,\n            indeterminate: false\n          }\n        }\n      default:\n        return state\n    }\n  }\n  else {\n    switch (action.type) {\n      case UIConstants.ADD_ALERT:\n        return {\n          ...state,\n          Snackbar: {\n            message: action.message,\n            status: action.status\n          }\n        }\n      case UIConstants.END_APP_LOADING:\n        return {\n          ...state,\n          AppLoading: false\n        }\n      case UIConstants.OPEN_NEW_CATEGORY_DIALOG:\n        return {\n          ...state,\n          Dialog: {\n            NewEntry: false,\n            NewCategory: true\n          }\n        }\n      case UIConstants.OPEN_NEW_ENTRY_DIALOG:\n        return {\n          ...state,\n          Dialog: {\n            NewEntry: true,\n            NewCategory: false\n          }\n        }\n      case UIConstants.CLOSE_DIALOG:\n        return {\n          ...state,\n          Dialog: {\n            NewEntry: false,\n            NewCategory: false\n          }\n        }\n      default:\n        return state\n    }\n  }\n}\n","import _ from 'lodash'\nimport { Reducer } from 'redux'\nimport { DataAction } from '../Actions/DataActions'\nimport { DataConstants } from '../Constants/DataConstants'\n\nexport interface Entry {\n  id: string\n  user: string\n  pass: string\n}\n\nexport interface Category {\n  name: string\n  entries: Entry[]\n}\n\nexport interface DataState {\n  Data: any\n  SelectedCategory: string\n}\n\nconst initialState = (): DataState => {\n  const defaultCategory: Category = { name: 'Default', entries: [] }\n  return (\n    {\n      Data: {\n        [defaultCategory.name]: defaultCategory\n      },\n      SelectedCategory: defaultCategory.name\n    }\n  )\n}\n\nexport const DataReducer: Reducer<DataState, DataAction> = (state = initialState(), action: DataAction) => {\n  switch (action.type) {\n    case DataConstants.EntryConstants.CREATE_ENTRY:\n      const user = _.get(action, 'entry_user')\n      const pass = _.get(action, 'entry_pass', '')\n      if (user) {\n        // temp\n        const id: string = '_' + Math.random().toString(36).substr(2, 9) // generate random id\n        const newEntry: Entry = { id, user, pass }\n        const SelectedCategory: string = state.SelectedCategory\n        const SelectedCategoryData: Category = state.Data[SelectedCategory]\n        const newEntries = [...SelectedCategoryData.entries]\n        newEntries.push(newEntry)\n\n        return {\n          ...state,\n          Data: {\n            ...state.Data,\n            [SelectedCategory]: { name: SelectedCategory, entries: newEntries }\n          }\n        }\n      }\n      return state\n    case DataConstants.CategoryConstants.CHANGE_SELECTED_CATEGORY:\n      return {\n        ...state,\n        SelectedCategory: action.category_name\n      }\n    case DataConstants.CategoryConstants.CREATE_CATEGORY:\n      return {\n        ...state,\n        Data: {\n          ...state.Data,\n          [action.category_name]: { name: action.category_name, entries: [] }\n        }\n      }\n    default:\n      return state\n  }\n\n}\n","import { combineReducers } from 'redux'\nimport { UserReducer, UserState } from './UserReducer'\nimport { UIReducer, UIState } from './UIReducer'\nimport { DataReducer, DataState } from './DataReducer'\n\nexport interface RootState {\n  UI: UIState\n  User: UserState\n  Data: DataState\n}\n\nconst rootReducer = combineReducers<RootState>({\n  UI: UIReducer,\n  User: UserReducer,\n  Data: DataReducer\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './Reducers'\n\nconst loggerMiddleware = createLogger()\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(loggerMiddleware)))\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './Redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}